/*
* generated by Xtext
*/

package org.eclipselabs.swedit.turtle.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class TurtleGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TurtleDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TurtleDocument");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//TurtleDocument:
		//	statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTripleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	Directive | Triple;
		public ParserRule getRule() { return rule; }

		//Directive | Triple
		public Alternatives getAlternatives() { return cAlternatives; }

		//Directive
		public RuleCall getDirectiveParserRuleCall_0() { return cDirectiveParserRuleCall_0; }

		//Triple
		public RuleCall getTripleParserRuleCall_1() { return cTripleParserRuleCall_1; }
	}

	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Directive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrefixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnNamedPrefixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBaseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Directive:
		//	Prefix | UnNamedPrefix | Base;
		public ParserRule getRule() { return rule; }

		//Prefix | UnNamedPrefix | Base
		public Alternatives getAlternatives() { return cAlternatives; }

		//Prefix
		public RuleCall getPrefixParserRuleCall_0() { return cPrefixParserRuleCall_0; }

		//UnNamedPrefix
		public RuleCall getUnNamedPrefixParserRuleCall_1() { return cUnNamedPrefixParserRuleCall_1; }

		//Base
		public RuleCall getBaseParserRuleCall_2() { return cBaseParserRuleCall_2; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUriAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUriIRI_TERMINALTerminalRuleCall_3_0 = (RuleCall)cUriAssignment_3.eContents().get(0);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Prefix:
		//	"@prefix" name=ID ":" uri=IRI_TERMINAL ".";
		public ParserRule getRule() { return rule; }

		//"@prefix" name=ID ":" uri=IRI_TERMINAL "."
		public Group getGroup() { return cGroup; }

		//"@prefix"
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//uri=IRI_TERMINAL
		public Assignment getUriAssignment_3() { return cUriAssignment_3; }

		//IRI_TERMINAL
		public RuleCall getUriIRI_TERMINALTerminalRuleCall_3_0() { return cUriIRI_TERMINALTerminalRuleCall_3_0; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
	}

	public class UnNamedPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnNamedPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUriIRI_TERMINALTerminalRuleCall_2_0 = (RuleCall)cUriAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnNamedPrefix returns Prefix:
		//	"@prefix" ":" uri=IRI_TERMINAL ".";
		public ParserRule getRule() { return rule; }

		//"@prefix" ":" uri=IRI_TERMINAL "."
		public Group getGroup() { return cGroup; }

		//"@prefix"
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//uri=IRI_TERMINAL
		public Assignment getUriAssignment_2() { return cUriAssignment_2; }

		//IRI_TERMINAL
		public RuleCall getUriIRI_TERMINALTerminalRuleCall_2_0() { return cUriIRI_TERMINALTerminalRuleCall_2_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}

	public class BaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Base");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUriIRI_TERMINALTerminalRuleCall_1_0 = (RuleCall)cUriAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Base:
		//	"@base" uri=IRI_TERMINAL ".";
		public ParserRule getRule() { return rule; }

		//"@base" uri=IRI_TERMINAL "."
		public Group getGroup() { return cGroup; }

		//"@base"
		public Keyword getBaseKeyword_0() { return cBaseKeyword_0; }

		//uri=IRI_TERMINAL
		public Assignment getUriAssignment_1() { return cUriAssignment_1; }

		//IRI_TERMINAL
		public RuleCall getUriIRI_TERMINALTerminalRuleCall_1_0() { return cUriIRI_TERMINALTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class TripleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Triple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubjectSubjectParserRuleCall_0_0 = (RuleCall)cSubjectAssignment_0.eContents().get(0);
		private final Assignment cPredicateObjectListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateObjectListPredicateObjectListParserRuleCall_1_0 = (RuleCall)cPredicateObjectListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredicateObjectListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredicateObjectListPredicateObjectListParserRuleCall_2_1_0 = (RuleCall)cPredicateObjectListAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Triple:
		//	subject=Subject predicateObjectList+=PredicateObjectList (";" predicateObjectList+=PredicateObjectList)* ".";
		public ParserRule getRule() { return rule; }

		//subject=Subject predicateObjectList+=PredicateObjectList (";" predicateObjectList+=PredicateObjectList)* "."
		public Group getGroup() { return cGroup; }

		//subject=Subject
		public Assignment getSubjectAssignment_0() { return cSubjectAssignment_0; }

		//Subject
		public RuleCall getSubjectSubjectParserRuleCall_0_0() { return cSubjectSubjectParserRuleCall_0_0; }

		//predicateObjectList+=PredicateObjectList
		public Assignment getPredicateObjectListAssignment_1() { return cPredicateObjectListAssignment_1; }

		//PredicateObjectList
		public RuleCall getPredicateObjectListPredicateObjectListParserRuleCall_1_0() { return cPredicateObjectListPredicateObjectListParserRuleCall_1_0; }

		//(";" predicateObjectList+=PredicateObjectList)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//predicateObjectList+=PredicateObjectList
		public Assignment getPredicateObjectListAssignment_2_1() { return cPredicateObjectListAssignment_2_1; }

		//PredicateObjectList
		public RuleCall getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0() { return cPredicateObjectListPredicateObjectListParserRuleCall_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}

	public class SubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlankParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subject:
		//	Resource | Blank;
		public ParserRule getRule() { return rule; }

		//Resource | Blank
		public Alternatives getAlternatives() { return cAlternatives; }

		//Resource
		public RuleCall getResourceParserRuleCall_0() { return cResourceParserRuleCall_0; }

		//Blank
		public RuleCall getBlankParserRuleCall_1() { return cBlankParserRuleCall_1; }
	}

	public class PredicateObjectListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateObjectList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicateVerbParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Assignment cObjectListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectListObjectListParserRuleCall_1_0 = (RuleCall)cObjectListAssignment_1.eContents().get(0);
		
		//PredicateObjectList:
		//	predicate=Verb objectList+=ObjectList;
		public ParserRule getRule() { return rule; }

		//predicate=Verb objectList+=ObjectList
		public Group getGroup() { return cGroup; }

		//predicate=Verb
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }

		//Verb
		public RuleCall getPredicateVerbParserRuleCall_0_0() { return cPredicateVerbParserRuleCall_0_0; }

		//objectList+=ObjectList
		public Assignment getObjectListAssignment_1() { return cObjectListAssignment_1; }

		//ObjectList
		public RuleCall getObjectListObjectListParserRuleCall_1_0() { return cObjectListObjectListParserRuleCall_1_0; }
	}

	public class VerbElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Verb");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAVerbParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Verb:
		//	Resource | AVerb;
		public ParserRule getRule() { return rule; }

		//Resource | AVerb
		public Alternatives getAlternatives() { return cAlternatives; }

		//Resource
		public RuleCall getResourceParserRuleCall_0() { return cResourceParserRuleCall_0; }

		//AVerb
		public RuleCall getAVerbParserRuleCall_1() { return cAVerbParserRuleCall_1; }
	}

	public class AVerbElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AVerb");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameAKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//AVerb:
		//	name="a";
		public ParserRule getRule() { return rule; }

		//name="a"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"a"
		public Keyword getNameAKeyword_0() { return cNameAKeyword_0; }
	}

	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cURIRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Resource:
		//	URIRef | QName;
		public ParserRule getRule() { return rule; }

		//URIRef | QName
		public Alternatives getAlternatives() { return cAlternatives; }

		//URIRef
		public RuleCall getURIRefParserRuleCall_0() { return cURIRefParserRuleCall_0; }

		//QName
		public RuleCall getQNameParserRuleCall_1() { return cQNameParserRuleCall_1; }
	}

	public class ObjectListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectObjectParserRuleCall_0_0 = (RuleCall)cObjectAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cObjectAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_1_1_0 = (RuleCall)cObjectAssignment_1_1.eContents().get(0);
		
		//ObjectList:
		//	object+=Object ("," object+=Object)*;
		public ParserRule getRule() { return rule; }

		//object+=Object ("," object+=Object)*
		public Group getGroup() { return cGroup; }

		//object+=Object
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }

		//Object
		public RuleCall getObjectObjectParserRuleCall_0_0() { return cObjectObjectParserRuleCall_0_0; }

		//("," object+=Object)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//object+=Object
		public Assignment getObjectAssignment_1_1() { return cObjectAssignment_1_1; }

		//Object
		public RuleCall getObjectObjectParserRuleCall_1_1_0() { return cObjectObjectParserRuleCall_1_1_0; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlankParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Object:
		//	Resource | Blank | Literal;
		public ParserRule getRule() { return rule; }

		//Resource | Blank | Literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//Resource
		public RuleCall getResourceParserRuleCall_0() { return cResourceParserRuleCall_0; }

		//Blank
		public RuleCall getBlankParserRuleCall_1() { return cBlankParserRuleCall_1; }

		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }
	}

	public class CollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Collection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsObjectListParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Collection:
		//	"(" items+=ObjectList+ ")";
		public ParserRule getRule() { return rule; }

		//"(" items+=ObjectList+ ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//items+=ObjectList+
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }

		//ObjectList
		public RuleCall getItemsObjectListParserRuleCall_1_0() { return cItemsObjectListParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//	StringValue | IntegerValue;
		public ParserRule getRule() { return rule; }

		//StringValue | IntegerValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagRDFTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//StringValue:
		//	value=STRING tag=RDFTag?;
		public ParserRule getRule() { return rule; }

		//value=STRING tag=RDFTag?
		public Group getGroup() { return cGroup; }

		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//tag=RDFTag?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }

		//RDFTag
		public RuleCall getTagRDFTagParserRuleCall_1_0() { return cTagRDFTagParserRuleCall_1_0; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagRDFTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//IntegerValue:
		//	value=INT tag=RDFTag?;
		public ParserRule getRule() { return rule; }

		//value=INT tag=RDFTag?
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//tag=RDFTag?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }

		//RDFTag
		public RuleCall getTagRDFTagParserRuleCall_1_0() { return cTagRDFTagParserRuleCall_1_0; }
	}

	public class RDFTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RDFTag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLangTagParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RDFTag:
		//	TypeTag | LangTag;
		public ParserRule getRule() { return rule; }

		//TypeTag | LangTag
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeTag
		public RuleCall getTypeTagParserRuleCall_0() { return cTypeTagParserRuleCall_0; }

		//LangTag
		public RuleCall getLangTagParserRuleCall_1() { return cLangTagParserRuleCall_1; }
	}

	public class TypeTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeTag hidden(WS):
		//	"^^" type=QName;
		public ParserRule getRule() { return rule; }

		//"^^" type=QName
		public Group getGroup() { return cGroup; }

		//"^^"
		public Keyword getCircumflexAccentCircumflexAccentKeyword_0() { return cCircumflexAccentCircumflexAccentKeyword_0; }

		//type=QName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//QName
		public RuleCall getTypeQNameParserRuleCall_1_0() { return cTypeQNameParserRuleCall_1_0; }
	}

	public class LangTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LangTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLangAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLangIDTerminalRuleCall_1_0 = (RuleCall)cLangAssignment_1.eContents().get(0);
		
		//LangTag hidden(WS):
		//	"@" lang=ID;
		public ParserRule getRule() { return rule; }

		//"@" lang=ID
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//lang=ID
		public Assignment getLangAssignment_1() { return cLangAssignment_1; }

		//ID
		public RuleCall getLangIDTerminalRuleCall_1_0() { return cLangIDTerminalRuleCall_1_0; }
	}

	public class URIRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URIRef");
		private final Assignment cUriAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUriIRI_TERMINALTerminalRuleCall_0 = (RuleCall)cUriAssignment.eContents().get(0);
		
		//URIRef:
		//	uri=IRI_TERMINAL;
		public ParserRule getRule() { return rule; }

		//uri=IRI_TERMINAL
		public Assignment getUriAssignment() { return cUriAssignment; }

		//IRI_TERMINAL
		public RuleCall getUriIRI_TERMINALTerminalRuleCall_0() { return cUriIRI_TERMINALTerminalRuleCall_0; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPrefixPrefixCrossReference_0_0 = (CrossReference)cPrefixAssignment_0.eContents().get(0);
		private final RuleCall cPrefixPrefixIDTerminalRuleCall_0_0_1 = (RuleCall)cPrefixPrefixCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//QName:
		//	prefix=[Prefix]? ":" name=ID;
		public ParserRule getRule() { return rule; }

		//prefix=[Prefix]? ":" name=ID
		public Group getGroup() { return cGroup; }

		//prefix=[Prefix]?
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//[Prefix]
		public CrossReference getPrefixPrefixCrossReference_0_0() { return cPrefixPrefixCrossReference_0_0; }

		//ID
		public RuleCall getPrefixPrefixIDTerminalRuleCall_0_0_1() { return cPrefixPrefixIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class BlankElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Blank");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVoidParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCollectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBlankNodeContentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Blank:
		//	NodeID | Void | Collection | BlankNodeContent;
		public ParserRule getRule() { return rule; }

		//NodeID | Void | Collection | BlankNodeContent
		public Alternatives getAlternatives() { return cAlternatives; }

		//NodeID
		public RuleCall getNodeIDParserRuleCall_0() { return cNodeIDParserRuleCall_0; }

		//Void
		public RuleCall getVoidParserRuleCall_1() { return cVoidParserRuleCall_1; }

		//Collection
		public RuleCall getCollectionParserRuleCall_2() { return cCollectionParserRuleCall_2; }

		//BlankNodeContent
		public RuleCall getBlankNodeContentParserRuleCall_3() { return cBlankNodeContentParserRuleCall_3; }
	}

	public class NodeIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodeIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeIDIDTerminalRuleCall_1_0 = (RuleCall)cNodeIDAssignment_1.eContents().get(0);
		
		//NodeID:
		//	"_:" nodeID=ID;
		public ParserRule getRule() { return rule; }

		//"_:" nodeID=ID
		public Group getGroup() { return cGroup; }

		//"_:"
		public Keyword get_Keyword_0() { return c_Keyword_0; }

		//nodeID=ID
		public Assignment getNodeIDAssignment_1() { return cNodeIDAssignment_1; }

		//ID
		public RuleCall getNodeIDIDTerminalRuleCall_1_0() { return cNodeIDIDTerminalRuleCall_1_0; }
	}

	public class VoidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Void");
		private final Assignment cNodeIDAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNodeIDLeftSquareBracketRightSquareBracketKeyword_0 = (Keyword)cNodeIDAssignment.eContents().get(0);
		
		//Void:
		//	nodeID="[]";
		public ParserRule getRule() { return rule; }

		//nodeID="[]"
		public Assignment getNodeIDAssignment() { return cNodeIDAssignment; }

		//"[]"
		public Keyword getNodeIDLeftSquareBracketRightSquareBracketKeyword_0() { return cNodeIDLeftSquareBracketRightSquareBracketKeyword_0; }
	}

	public class BlankNodeContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlankNodeContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredicateObjectListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateObjectListPredicateObjectListParserRuleCall_1_0 = (RuleCall)cPredicateObjectListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPredicateObjectListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredicateObjectListPredicateObjectListParserRuleCall_2_1_0 = (RuleCall)cPredicateObjectListAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlankNodeContent:
		//	"[" predicateObjectList+=PredicateObjectList (";" predicateObjectList+=PredicateObjectList)* "]";
		public ParserRule getRule() { return rule; }

		//"[" predicateObjectList+=PredicateObjectList (";" predicateObjectList+=PredicateObjectList)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//predicateObjectList+=PredicateObjectList
		public Assignment getPredicateObjectListAssignment_1() { return cPredicateObjectListAssignment_1; }

		//PredicateObjectList
		public RuleCall getPredicateObjectListPredicateObjectListParserRuleCall_1_0() { return cPredicateObjectListPredicateObjectListParserRuleCall_1_0; }

		//(";" predicateObjectList+=PredicateObjectList)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//predicateObjectList+=PredicateObjectList
		public Assignment getPredicateObjectListAssignment_2_1() { return cPredicateObjectListAssignment_2_1; }

		//PredicateObjectList
		public RuleCall getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0() { return cPredicateObjectListPredicateObjectListParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	
	
	private TurtleDocumentElements pTurtleDocument;
	private StatementElements pStatement;
	private DirectiveElements pDirective;
	private PrefixElements pPrefix;
	private UnNamedPrefixElements pUnNamedPrefix;
	private BaseElements pBase;
	private TripleElements pTriple;
	private SubjectElements pSubject;
	private PredicateObjectListElements pPredicateObjectList;
	private VerbElements pVerb;
	private AVerbElements pAVerb;
	private ResourceElements pResource;
	private ObjectListElements pObjectList;
	private ObjectElements pObject;
	private CollectionElements pCollection;
	private LiteralElements pLiteral;
	private StringValueElements pStringValue;
	private IntegerValueElements pIntegerValue;
	private RDFTagElements pRDFTag;
	private TypeTagElements pTypeTag;
	private LangTagElements pLangTag;
	private URIRefElements pURIRef;
	private QNameElements pQName;
	private BlankElements pBlank;
	private NodeIDElements pNodeID;
	private VoidElements pVoid;
	private BlankNodeContentElements pBlankNodeContent;
	private TerminalRule tIRI_TERMINAL;
	private TerminalRule tSTRING;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public TurtleGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//TurtleDocument:
	//	statements+=Statement*;
	public TurtleDocumentElements getTurtleDocumentAccess() {
		return (pTurtleDocument != null) ? pTurtleDocument : (pTurtleDocument = new TurtleDocumentElements());
	}
	
	public ParserRule getTurtleDocumentRule() {
		return getTurtleDocumentAccess().getRule();
	}

	//Statement:
	//	Directive | Triple;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Directive:
	//	Prefix | UnNamedPrefix | Base;
	public DirectiveElements getDirectiveAccess() {
		return (pDirective != null) ? pDirective : (pDirective = new DirectiveElements());
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}

	//Prefix:
	//	"@prefix" name=ID ":" uri=IRI_TERMINAL ".";
	public PrefixElements getPrefixAccess() {
		return (pPrefix != null) ? pPrefix : (pPrefix = new PrefixElements());
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	//UnNamedPrefix returns Prefix:
	//	"@prefix" ":" uri=IRI_TERMINAL ".";
	public UnNamedPrefixElements getUnNamedPrefixAccess() {
		return (pUnNamedPrefix != null) ? pUnNamedPrefix : (pUnNamedPrefix = new UnNamedPrefixElements());
	}
	
	public ParserRule getUnNamedPrefixRule() {
		return getUnNamedPrefixAccess().getRule();
	}

	//Base:
	//	"@base" uri=IRI_TERMINAL ".";
	public BaseElements getBaseAccess() {
		return (pBase != null) ? pBase : (pBase = new BaseElements());
	}
	
	public ParserRule getBaseRule() {
		return getBaseAccess().getRule();
	}

	//Triple:
	//	subject=Subject predicateObjectList+=PredicateObjectList (";" predicateObjectList+=PredicateObjectList)* ".";
	public TripleElements getTripleAccess() {
		return (pTriple != null) ? pTriple : (pTriple = new TripleElements());
	}
	
	public ParserRule getTripleRule() {
		return getTripleAccess().getRule();
	}

	//Subject:
	//	Resource | Blank;
	public SubjectElements getSubjectAccess() {
		return (pSubject != null) ? pSubject : (pSubject = new SubjectElements());
	}
	
	public ParserRule getSubjectRule() {
		return getSubjectAccess().getRule();
	}

	//PredicateObjectList:
	//	predicate=Verb objectList+=ObjectList;
	public PredicateObjectListElements getPredicateObjectListAccess() {
		return (pPredicateObjectList != null) ? pPredicateObjectList : (pPredicateObjectList = new PredicateObjectListElements());
	}
	
	public ParserRule getPredicateObjectListRule() {
		return getPredicateObjectListAccess().getRule();
	}

	//Verb:
	//	Resource | AVerb;
	public VerbElements getVerbAccess() {
		return (pVerb != null) ? pVerb : (pVerb = new VerbElements());
	}
	
	public ParserRule getVerbRule() {
		return getVerbAccess().getRule();
	}

	//AVerb:
	//	name="a";
	public AVerbElements getAVerbAccess() {
		return (pAVerb != null) ? pAVerb : (pAVerb = new AVerbElements());
	}
	
	public ParserRule getAVerbRule() {
		return getAVerbAccess().getRule();
	}

	//Resource:
	//	URIRef | QName;
	public ResourceElements getResourceAccess() {
		return (pResource != null) ? pResource : (pResource = new ResourceElements());
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	//ObjectList:
	//	object+=Object ("," object+=Object)*;
	public ObjectListElements getObjectListAccess() {
		return (pObjectList != null) ? pObjectList : (pObjectList = new ObjectListElements());
	}
	
	public ParserRule getObjectListRule() {
		return getObjectListAccess().getRule();
	}

	//Object:
	//	Resource | Blank | Literal;
	public ObjectElements getObjectAccess() {
		return (pObject != null) ? pObject : (pObject = new ObjectElements());
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//Collection:
	//	"(" items+=ObjectList+ ")";
	public CollectionElements getCollectionAccess() {
		return (pCollection != null) ? pCollection : (pCollection = new CollectionElements());
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}

	//Literal:
	//	StringValue | IntegerValue;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//StringValue:
	//	value=STRING tag=RDFTag?;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//IntegerValue:
	//	value=INT tag=RDFTag?;
	public IntegerValueElements getIntegerValueAccess() {
		return (pIntegerValue != null) ? pIntegerValue : (pIntegerValue = new IntegerValueElements());
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//RDFTag:
	//	TypeTag | LangTag;
	public RDFTagElements getRDFTagAccess() {
		return (pRDFTag != null) ? pRDFTag : (pRDFTag = new RDFTagElements());
	}
	
	public ParserRule getRDFTagRule() {
		return getRDFTagAccess().getRule();
	}

	//TypeTag hidden(WS):
	//	"^^" type=QName;
	public TypeTagElements getTypeTagAccess() {
		return (pTypeTag != null) ? pTypeTag : (pTypeTag = new TypeTagElements());
	}
	
	public ParserRule getTypeTagRule() {
		return getTypeTagAccess().getRule();
	}

	//LangTag hidden(WS):
	//	"@" lang=ID;
	public LangTagElements getLangTagAccess() {
		return (pLangTag != null) ? pLangTag : (pLangTag = new LangTagElements());
	}
	
	public ParserRule getLangTagRule() {
		return getLangTagAccess().getRule();
	}

	//URIRef:
	//	uri=IRI_TERMINAL;
	public URIRefElements getURIRefAccess() {
		return (pURIRef != null) ? pURIRef : (pURIRef = new URIRefElements());
	}
	
	public ParserRule getURIRefRule() {
		return getURIRefAccess().getRule();
	}

	//QName:
	//	prefix=[Prefix]? ":" name=ID;
	public QNameElements getQNameAccess() {
		return (pQName != null) ? pQName : (pQName = new QNameElements());
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	//Blank:
	//	NodeID | Void | Collection | BlankNodeContent;
	public BlankElements getBlankAccess() {
		return (pBlank != null) ? pBlank : (pBlank = new BlankElements());
	}
	
	public ParserRule getBlankRule() {
		return getBlankAccess().getRule();
	}

	//NodeID:
	//	"_:" nodeID=ID;
	public NodeIDElements getNodeIDAccess() {
		return (pNodeID != null) ? pNodeID : (pNodeID = new NodeIDElements());
	}
	
	public ParserRule getNodeIDRule() {
		return getNodeIDAccess().getRule();
	}

	//Void:
	//	nodeID="[]";
	public VoidElements getVoidAccess() {
		return (pVoid != null) ? pVoid : (pVoid = new VoidElements());
	}
	
	public ParserRule getVoidRule() {
		return getVoidAccess().getRule();
	}

	//BlankNodeContent:
	//	"[" predicateObjectList+=PredicateObjectList (";" predicateObjectList+=PredicateObjectList)* "]";
	public BlankNodeContentElements getBlankNodeContentAccess() {
		return (pBlankNodeContent != null) ? pBlankNodeContent : (pBlankNodeContent = new BlankNodeContentElements());
	}
	
	public ParserRule getBlankNodeContentRule() {
		return getBlankNodeContentAccess().getRule();
	}

	//terminal IRI_TERMINAL:
	//	"<" ("a".."z" | "A".."Z" | "_" | "-" | "0".."9" | "/" | ":" | "." | "#" | "?" | "@" | "$" | "&" | "=")* ">";
	public TerminalRule getIRI_TERMINALRule() {
		return (tIRI_TERMINAL != null) ? tIRI_TERMINAL : (tIRI_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IRI_TERMINAL"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "-" | "0".."9" | "/" | "." | "#" | "?")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
