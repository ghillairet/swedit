/*
* generated by Xtext
*/
parser grammar InternalTurtle;

options {
	tokenVocab=InternalTurtle;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.eclipselabs.swedit.turtle.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipselabs.swedit.turtle.services.TurtleGrammarAccess;

}

@members {


 	private TurtleGrammarAccess grammarAccess;
 	
    public InternalTurtleParser(TokenStream input, IAstFactory factory, TurtleGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipselabs/swedit/turtle/parser/antlr/internal/InternalTurtle.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TurtleDocument";	
   	} 
   	   	
   	@Override
   	protected TurtleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTurtleDocument
entryRuleTurtleDocument returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getTurtleDocumentRule(), currentNode); }
	 iv_ruleTurtleDocument=ruleTurtleDocument 
	 { $current=$iv_ruleTurtleDocument.current; } 
	 EOF 
;

// Rule TurtleDocument
ruleTurtleDocument returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTurtleDocumentAccess().getStatementsStatementParserRuleCall_0(), currentNode); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTurtleDocumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_0_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getDirectiveParserRuleCall_0(), currentNode); 
    }
    this_Directive_0=ruleDirective
    {
        $current = $this_Directive_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getTripleParserRuleCall_1(), currentNode); 
    }
    this_Triple_1=ruleTriple
    {
        $current = $this_Triple_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDirective
entryRuleDirective returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getDirectiveRule(), currentNode); }
	 iv_ruleDirective=ruleDirective 
	 { $current=$iv_ruleDirective.current; } 
	 EOF 
;

// Rule Directive
ruleDirective returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDirectiveAccess().getPrefixParserRuleCall_0(), currentNode); 
    }
    this_Prefix_0=rulePrefix
    {
        $current = $this_Prefix_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDirectiveAccess().getUnNamedPrefixParserRuleCall_1(), currentNode); 
    }
    this_UnNamedPrefix_1=ruleUnNamedPrefix
    {
        $current = $this_UnNamedPrefix_1.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDirectiveAccess().getBaseParserRuleCall_2(), currentNode); 
    }
    this_Base_2=ruleBase
    {
        $current = $this_Base_2.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePrefix
entryRulePrefix returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrefixRule(), currentNode); }
	 iv_rulePrefix=rulePrefix 
	 { $current=$iv_rulePrefix.current; } 
	 EOF 
;

// Rule Prefix
rulePrefix returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getPrefixAccess().getPrefixKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPrefixAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrefixRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getPrefixAccess().getColonKeyword_2(), null); 
    }
(
(
		lv_uri_3_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getPrefixAccess().getUriIRI_TERMINALTerminalRuleCall_3_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrefixRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_3_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getPrefixAccess().getFullStopKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleUnNamedPrefix
entryRuleUnNamedPrefix returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnNamedPrefixRule(), currentNode); }
	 iv_ruleUnNamedPrefix=ruleUnNamedPrefix 
	 { $current=$iv_ruleUnNamedPrefix.current; } 
	 EOF 
;

// Rule UnNamedPrefix
ruleUnNamedPrefix returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_15 
    {
        createLeafNode(grammarAccess.getUnNamedPrefixAccess().getPrefixKeyword_0(), null); 
    }

	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getUnNamedPrefixAccess().getColonKeyword_1(), null); 
    }
(
(
		lv_uri_2_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getUnNamedPrefixAccess().getUriIRI_TERMINALTerminalRuleCall_2_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnNamedPrefixRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_2_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getUnNamedPrefixAccess().getFullStopKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleBase
entryRuleBase returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBaseRule(), currentNode); }
	 iv_ruleBase=ruleBase 
	 { $current=$iv_ruleBase.current; } 
	 EOF 
;

// Rule Base
ruleBase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_14 
    {
        createLeafNode(grammarAccess.getBaseAccess().getBaseKeyword_0(), null); 
    }
(
(
		lv_uri_1_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getBaseAccess().getUriIRI_TERMINALTerminalRuleCall_1_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_1_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getBaseAccess().getFullStopKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleTriple
entryRuleTriple returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getTripleRule(), currentNode); }
	 iv_ruleTriple=ruleTriple 
	 { $current=$iv_ruleTriple.current; } 
	 EOF 
;

// Rule Triple
ruleTriple returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTripleAccess().getSubjectSubjectParserRuleCall_0_0(), currentNode); 
	    }
		lv_subject_0_0=ruleSubject		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTripleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"subject",
	        		lv_subject_0_0, 
	        		"Subject", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTripleAccess().getPredicateObjectListPredicateObjectListParserRuleCall_1_0(), currentNode); 
	    }
		lv_predicateObjectList_1_0=rulePredicateObjectList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTripleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"predicateObjectList",
	        		lv_predicateObjectList_1_0, 
	        		"PredicateObjectList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getTripleAccess().getSemicolonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTripleAccess().getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_predicateObjectList_3_0=rulePredicateObjectList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTripleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"predicateObjectList",
	        		lv_predicateObjectList_3_0, 
	        		"PredicateObjectList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
	KEYWORD_4 
    {
        createLeafNode(grammarAccess.getTripleAccess().getFullStopKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleSubject
entryRuleSubject returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubjectRule(), currentNode); }
	 iv_ruleSubject=ruleSubject 
	 { $current=$iv_ruleSubject.current; } 
	 EOF 
;

// Rule Subject
ruleSubject returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSubjectAccess().getResourceParserRuleCall_0(), currentNode); 
    }
    this_Resource_0=ruleResource
    {
        $current = $this_Resource_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSubjectAccess().getBlankParserRuleCall_1(), currentNode); 
    }
    this_Blank_1=ruleBlank
    {
        $current = $this_Blank_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePredicateObjectList
entryRulePredicateObjectList returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getPredicateObjectListRule(), currentNode); }
	 iv_rulePredicateObjectList=rulePredicateObjectList 
	 { $current=$iv_rulePredicateObjectList.current; } 
	 EOF 
;

// Rule PredicateObjectList
rulePredicateObjectList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredicateObjectListAccess().getPredicateVerbParserRuleCall_0_0(), currentNode); 
	    }
		lv_predicate_0_0=ruleVerb		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredicateObjectListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"predicate",
	        		lv_predicate_0_0, 
	        		"Verb", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredicateObjectListAccess().getObjectListObjectListParserRuleCall_1_0(), currentNode); 
	    }
		lv_objectList_1_0=ruleObjectList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredicateObjectListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"objectList",
	        		lv_objectList_1_0, 
	        		"ObjectList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVerb
entryRuleVerb returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVerbRule(), currentNode); }
	 iv_ruleVerb=ruleVerb 
	 { $current=$iv_ruleVerb.current; } 
	 EOF 
;

// Rule Verb
ruleVerb returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getVerbAccess().getResourceParserRuleCall_0(), currentNode); 
    }
    this_Resource_0=ruleResource
    {
        $current = $this_Resource_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVerbAccess().getAVerbParserRuleCall_1(), currentNode); 
    }
    this_AVerb_1=ruleAVerb
    {
        $current = $this_AVerb_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAVerb
entryRuleAVerb returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getAVerbRule(), currentNode); }
	 iv_ruleAVerb=ruleAVerb 
	 { $current=$iv_ruleAVerb.current; } 
	 EOF 
;

// Rule AVerb
ruleAVerb returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=
	KEYWORD_10 
    {
        createLeafNode(grammarAccess.getAVerbAccess().getNameAKeyword_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAVerbRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "a", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getResourceRule(), currentNode); }
	 iv_ruleResource=ruleResource 
	 { $current=$iv_ruleResource.current; } 
	 EOF 
;

// Rule Resource
ruleResource returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getResourceAccess().getURIRefParserRuleCall_0(), currentNode); 
    }
    this_URIRef_0=ruleURIRef
    {
        $current = $this_URIRef_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getResourceAccess().getQNameParserRuleCall_1(), currentNode); 
    }
    this_QName_1=ruleQName
    {
        $current = $this_QName_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleObjectList
entryRuleObjectList returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getObjectListRule(), currentNode); }
	 iv_ruleObjectList=ruleObjectList 
	 { $current=$iv_ruleObjectList.current; } 
	 EOF 
;

// Rule ObjectList
ruleObjectList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getObjectListAccess().getObjectObjectParserRuleCall_0_0(), currentNode); 
	    }
		lv_object_0_0=ruleObject		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getObjectListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"object",
	        		lv_object_0_0, 
	        		"Object", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_3 
    {
        createLeafNode(grammarAccess.getObjectListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getObjectListAccess().getObjectObjectParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_object_2_0=ruleObject		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getObjectListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"object",
	        		lv_object_2_0, 
	        		"Object", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getObjectRule(), currentNode); }
	 iv_ruleObject=ruleObject 
	 { $current=$iv_ruleObject.current; } 
	 EOF 
;

// Rule Object
ruleObject returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getObjectAccess().getResourceParserRuleCall_0(), currentNode); 
    }
    this_Resource_0=ruleResource
    {
        $current = $this_Resource_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getObjectAccess().getBlankParserRuleCall_1(), currentNode); 
    }
    this_Blank_1=ruleBlank
    {
        $current = $this_Blank_1.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getObjectAccess().getLiteralParserRuleCall_2(), currentNode); 
    }
    this_Literal_2=ruleLiteral
    {
        $current = $this_Literal_2.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCollection
entryRuleCollection returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionRule(), currentNode); }
	 iv_ruleCollection=ruleCollection 
	 { $current=$iv_ruleCollection.current; } 
	 EOF 
;

// Rule Collection
ruleCollection returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_1 
    {
        createLeafNode(grammarAccess.getCollectionAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionAccess().getItemsObjectListParserRuleCall_1_0(), currentNode); 
	    }
		lv_items_1_0=ruleObjectList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_1_0, 
	        		"ObjectList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
	KEYWORD_2 
    {
        createLeafNode(grammarAccess.getCollectionAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getStringValueParserRuleCall_0(), currentNode); 
    }
    this_StringValue_0=ruleStringValue
    {
        $current = $this_StringValue_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getIntegerValueParserRuleCall_1(), currentNode); 
    }
    this_IntegerValue_1=ruleIntegerValue
    {
        $current = $this_IntegerValue_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringValueRule(), currentNode); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringValueAccess().getTagRDFTagParserRuleCall_1_0(), currentNode); 
	    }
		lv_tag_1_0=ruleRDFTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tag",
	        		lv_tag_1_0, 
	        		"RDFTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerValueRule(), currentNode); }
	 iv_ruleIntegerValue=ruleIntegerValue 
	 { $current=$iv_ruleIntegerValue.current; } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntegerValueAccess().getTagRDFTagParserRuleCall_1_0(), currentNode); 
	    }
		lv_tag_1_0=ruleRDFTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tag",
	        		lv_tag_1_0, 
	        		"RDFTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleRDFTag
entryRuleRDFTag returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getRDFTagRule(), currentNode); }
	 iv_ruleRDFTag=ruleRDFTag 
	 { $current=$iv_ruleRDFTag.current; } 
	 EOF 
;

// Rule RDFTag
ruleRDFTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRDFTagAccess().getTypeTagParserRuleCall_0(), currentNode); 
    }
    this_TypeTag_0=ruleTypeTag
    {
        $current = $this_TypeTag_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getRDFTagAccess().getLangTagParserRuleCall_1(), currentNode); 
    }
    this_LangTag_1=ruleLangTag
    {
        $current = $this_LangTag_1.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTypeTag
entryRuleTypeTag returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeTagRule(), currentNode); }
	 iv_ruleTypeTag=ruleTypeTag 
	 { $current=$iv_ruleTypeTag.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TypeTag
ruleTypeTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_12 
    {
        createLeafNode(grammarAccess.getTypeTagAccess().getCircumflexAccentCircumflexAccentKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeTagAccess().getTypeQNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleQName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"QName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLangTag
entryRuleLangTag returns [EObject current=null]
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getLangTagRule(), currentNode); }
	 iv_ruleLangTag=ruleLangTag 
	 { $current=$iv_ruleLangTag.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LangTag
ruleLangTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_7 
    {
        createLeafNode(grammarAccess.getLangTagAccess().getCommercialAtKeyword_0(), null); 
    }
(
(
		lv_lang_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLangTagAccess().getLangIDTerminalRuleCall_1_0(), "lang"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLangTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lang",
	        		lv_lang_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleURIRef
entryRuleURIRef returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getURIRefRule(), currentNode); }
	 iv_ruleURIRef=ruleURIRef 
	 { $current=$iv_ruleURIRef.current; } 
	 EOF 
;

// Rule URIRef
ruleURIRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_uri_0_0=RULE_IRI_TERMINAL
		{
			createLeafNode(grammarAccess.getURIRefAccess().getUriIRI_TERMINALTerminalRuleCall_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getURIRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_0_0, 
	        		"IRI_TERMINAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleQName
entryRuleQName returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getQNameRule(), currentNode); }
	 iv_ruleQName=ruleQName 
	 { $current=$iv_ruleQName.current; } 
	 EOF 
;

// Rule QName
ruleQName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getQNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getQNameAccess().getPrefixPrefixCrossReference_0_0(), "prefix"); 
	}

)
)?
	KEYWORD_5 
    {
        createLeafNode(grammarAccess.getQNameAccess().getColonKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getQNameAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleBlank
entryRuleBlank returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlankRule(), currentNode); }
	 iv_ruleBlank=ruleBlank 
	 { $current=$iv_ruleBlank.current; } 
	 EOF 
;

// Rule Blank
ruleBlank returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBlankAccess().getNodeIDParserRuleCall_0(), currentNode); 
    }
    this_NodeID_0=ruleNodeID
    {
        $current = $this_NodeID_0.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBlankAccess().getVoidParserRuleCall_1(), currentNode); 
    }
    this_Void_1=ruleVoid
    {
        $current = $this_Void_1.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBlankAccess().getCollectionParserRuleCall_2(), currentNode); 
    }
    this_Collection_2=ruleCollection
    {
        $current = $this_Collection_2.current;
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBlankAccess().getBlankNodeContentParserRuleCall_3(), currentNode); 
    }
    this_BlankNodeContent_3=ruleBlankNodeContent
    {
        $current = $this_BlankNodeContent_3.current;
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNodeID
entryRuleNodeID returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getNodeIDRule(), currentNode); }
	 iv_ruleNodeID=ruleNodeID 
	 { $current=$iv_ruleNodeID.current; } 
	 EOF 
;

// Rule NodeID
ruleNodeID returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_13 
    {
        createLeafNode(grammarAccess.getNodeIDAccess().get_Keyword_0(), null); 
    }
(
(
		lv_nodeID_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNodeIDAccess().getNodeIDIDTerminalRuleCall_1_0(), "nodeID"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeIDRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nodeID",
	        		lv_nodeID_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleVoid
entryRuleVoid returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getVoidRule(), currentNode); }
	 iv_ruleVoid=ruleVoid 
	 { $current=$iv_ruleVoid.current; } 
	 EOF 
;

// Rule Void
ruleVoid returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_nodeID_0_0=
	KEYWORD_11 
    {
        createLeafNode(grammarAccess.getVoidAccess().getNodeIDLeftSquareBracketRightSquareBracketKeyword_0(), "nodeID"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVoidRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "nodeID", lv_nodeID_0_0, "[]", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleBlankNodeContent
entryRuleBlankNodeContent returns [EObject current=null]
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlankNodeContentRule(), currentNode); }
	 iv_ruleBlankNodeContent=ruleBlankNodeContent 
	 { $current=$iv_ruleBlankNodeContent.current; } 
	 EOF 
;

// Rule BlankNodeContent
ruleBlankNodeContent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	KEYWORD_8 
    {
        createLeafNode(grammarAccess.getBlankNodeContentAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListPredicateObjectListParserRuleCall_1_0(), currentNode); 
	    }
		lv_predicateObjectList_1_0=rulePredicateObjectList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlankNodeContentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"predicateObjectList",
	        		lv_predicateObjectList_1_0, 
	        		"PredicateObjectList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
	KEYWORD_6 
    {
        createLeafNode(grammarAccess.getBlankNodeContentAccess().getSemicolonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_predicateObjectList_3_0=rulePredicateObjectList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlankNodeContentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"predicateObjectList",
	        		lv_predicateObjectList_3_0, 
	        		"PredicateObjectList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
	KEYWORD_9 
    {
        createLeafNode(grammarAccess.getBlankNodeContentAccess().getRightSquareBracketKeyword_3(), null); 
    }
)
;





