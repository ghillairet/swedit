/*
* generated by Xtext
*/

package org.eclipselabs.swedit.jenarules.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class JenaRulesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class JenaRuleDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JenaRuleDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixesPrefixParserRuleCall_0_0 = (RuleCall)cPrefixesAssignment_0.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//JenaRuleDocument:
		//	prefixes+=Prefix* rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//prefixes+=Prefix* rules+=Rule*
		public Group getGroup() { return cGroup; }

		//prefixes+=Prefix*
		public Assignment getPrefixesAssignment_0() { return cPrefixesAssignment_0; }

		//Prefix
		public RuleCall getPrefixesPrefixParserRuleCall_0_0() { return cPrefixesPrefixParserRuleCall_0_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBareRuleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBareRuleBareRuleParserRuleCall_0_0 = (RuleCall)cBareRuleAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBareRuleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBareRuleBareRuleParserRuleCall_1_1_0 = (RuleCall)cBareRuleAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRuleNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRuleNameIDTerminalRuleCall_2_1_0 = (RuleCall)cRuleNameAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cBareRuleAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cBareRuleBareRuleParserRuleCall_2_3_0 = (RuleCall)cBareRuleAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Rule:
		//	bareRule=BareRule | "[" bareRule=BareRule "]" | "[" ruleName=ID ":" bareRule=BareRule "]";
		public ParserRule getRule() { return rule; }

		//bareRule=BareRule | "[" bareRule=BareRule "]" | "[" ruleName=ID ":" bareRule=BareRule "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//bareRule=BareRule
		public Assignment getBareRuleAssignment_0() { return cBareRuleAssignment_0; }

		//BareRule
		public RuleCall getBareRuleBareRuleParserRuleCall_0_0() { return cBareRuleBareRuleParserRuleCall_0_0; }

		//"[" bareRule=BareRule "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//bareRule=BareRule
		public Assignment getBareRuleAssignment_1_1() { return cBareRuleAssignment_1_1; }

		//BareRule
		public RuleCall getBareRuleBareRuleParserRuleCall_1_1_0() { return cBareRuleBareRuleParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"[" ruleName=ID ":" bareRule=BareRule "]"
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//ruleName=ID
		public Assignment getRuleNameAssignment_2_1() { return cRuleNameAssignment_2_1; }

		//ID
		public RuleCall getRuleNameIDTerminalRuleCall_2_1_0() { return cRuleNameIDTerminalRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }

		//bareRule=BareRule
		public Assignment getBareRuleAssignment_2_3() { return cBareRuleAssignment_2_3; }

		//BareRule
		public RuleCall getBareRuleBareRuleParserRuleCall_2_3_0() { return cBareRuleBareRuleParserRuleCall_2_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUriAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUriIRI_TERMINALTerminalRuleCall_3_0 = (RuleCall)cUriAssignment_3.eContents().get(0);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Prefix:
		//	"@prefix" name=ID ":" uri=IRI_TERMINAL ".";
		public ParserRule getRule() { return rule; }

		//"@prefix" name=ID ":" uri=IRI_TERMINAL "."
		public Group getGroup() { return cGroup; }

		//"@prefix"
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//uri=IRI_TERMINAL
		public Assignment getUriAssignment_3() { return cUriAssignment_3; }

		//IRI_TERMINAL
		public RuleCall getUriIRI_TERMINALTerminalRuleCall_3_0() { return cUriIRI_TERMINALTerminalRuleCall_3_0; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
	}

	public class BareRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BareRule");
		private final RuleCall cForwardRuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////	|
		////	BackWardRule
		//BareRule:
		//	ForwardRule;
		public ParserRule getRule() { return rule; }

		//ForwardRule
		public RuleCall getForwardRuleParserRuleCall() { return cForwardRuleParserRuleCall; }
	}

	public class ForwardRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForwardRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftTermsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftTermsTermParserRuleCall_0_0 = (RuleCall)cLeftTermsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftTermsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftTermsTermParserRuleCall_1_1_0 = (RuleCall)cLeftTermsAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightTermsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightTermsTermParserRuleCall_3_0 = (RuleCall)cRightTermsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRightTermsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRightTermsTermParserRuleCall_4_1_0 = (RuleCall)cRightTermsAssignment_4_1.eContents().get(0);
		
		//ForwardRule:
		//	leftTerms+=Term ("," leftTerms+=Term)* "->" rightTerms+=Term ("," rightTerms+=Term)*;
		public ParserRule getRule() { return rule; }

		//leftTerms+=Term ("," leftTerms+=Term)* "->" rightTerms+=Term ("," rightTerms+=Term)*
		public Group getGroup() { return cGroup; }

		//leftTerms+=Term
		public Assignment getLeftTermsAssignment_0() { return cLeftTermsAssignment_0; }

		//Term
		public RuleCall getLeftTermsTermParserRuleCall_0_0() { return cLeftTermsTermParserRuleCall_0_0; }

		//("," leftTerms+=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//leftTerms+=Term
		public Assignment getLeftTermsAssignment_1_1() { return cLeftTermsAssignment_1_1; }

		//Term
		public RuleCall getLeftTermsTermParserRuleCall_1_1_0() { return cLeftTermsTermParserRuleCall_1_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//rightTerms+=Term
		public Assignment getRightTermsAssignment_3() { return cRightTermsAssignment_3; }

		//Term
		public RuleCall getRightTermsTermParserRuleCall_3_0() { return cRightTermsTermParserRuleCall_3_0; }

		//("," rightTerms+=Term)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//rightTerms+=Term
		public Assignment getRightTermsAssignment_4_1() { return cRightTermsAssignment_4_1; }

		//Term
		public RuleCall getRightTermsTermParserRuleCall_4_1_0() { return cRightTermsTermParserRuleCall_4_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubjectNodeParserRuleCall_1_0 = (RuleCall)cSubjectAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateNodeParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectNodeParserRuleCall_3_0 = (RuleCall)cObjectAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////BackWardRule:
		////	left=ForwardRule '<-' rightTerms+=Term (rightTerms+=Term)*
		////;
		////HTerm:
		////     Term | BareRule
		////;
		//Term:
		//	"(" subject=Node predicate=Node object=Node ")";
		public ParserRule getRule() { return rule; }

		//"(" subject=Node predicate=Node object=Node ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//subject=Node
		public Assignment getSubjectAssignment_1() { return cSubjectAssignment_1; }

		//Node
		public RuleCall getSubjectNodeParserRuleCall_1_0() { return cSubjectNodeParserRuleCall_1_0; }

		//predicate=Node
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//Node
		public RuleCall getPredicateNodeParserRuleCall_2_0() { return cPredicateNodeParserRuleCall_2_0; }

		//object=Node
		public Assignment getObjectAssignment_3() { return cObjectAssignment_3; }

		//Node
		public RuleCall getObjectNodeParserRuleCall_3_0() { return cObjectNodeParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodesNodeParserRuleCall_2_0 = (RuleCall)cNodesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNodesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_3_1_0 = (RuleCall)cNodesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Function:
		//	name=ID "(" nodes+=Node ("," nodes+=Node)* ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" nodes+=Node ("," nodes+=Node)* ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//nodes+=Node
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_2_0() { return cNodesNodeParserRuleCall_2_0; }

		//("," nodes+=Node)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//nodes+=Node
		public Assignment getNodesAssignment_3_1() { return cNodesAssignment_3_1; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_3_1_0() { return cNodesNodeParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class BHTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BHTerm");
		private final RuleCall cTermParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////          or   (node, node, functor)        // extended triple pattern
		////          or   builtin(node, ... node)      // invoke procedural primitive
		//BHTerm:
		//	Term;
		public ParserRule getRule() { return rule; }

		//Term
		public RuleCall getTermParserRuleCall() { return cTermParserRuleCall; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cURIRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Node:
		//	URIRef | QName | Variable | Literal | Function;
		public ParserRule getRule() { return rule; }

		//URIRef | QName | Variable | Literal | Function
		public Alternatives getAlternatives() { return cAlternatives; }

		//URIRef
		public RuleCall getURIRefParserRuleCall_0() { return cURIRefParserRuleCall_0; }

		//QName
		public RuleCall getQNameParserRuleCall_1() { return cQNameParserRuleCall_1; }

		//Variable
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }

		//Literal
		public RuleCall getLiteralParserRuleCall_3() { return cLiteralParserRuleCall_3; }

		//Function
		public RuleCall getFunctionParserRuleCall_4() { return cFunctionParserRuleCall_4; }
	}

	public class URIRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URIRef");
		private final Assignment cUriAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUriIRI_TERMINALTerminalRuleCall_0 = (RuleCall)cUriAssignment.eContents().get(0);
		
		//URIRef:
		//	uri=IRI_TERMINAL;
		public ParserRule getRule() { return rule; }

		//uri=IRI_TERMINAL
		public Assignment getUriAssignment() { return cUriAssignment; }

		//IRI_TERMINAL
		public RuleCall getUriIRI_TERMINALTerminalRuleCall_0() { return cUriIRI_TERMINALTerminalRuleCall_0; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPrefixPrefixCrossReference_0_0 = (CrossReference)cPrefixAssignment_0.eContents().get(0);
		private final RuleCall cPrefixPrefixIDTerminalRuleCall_0_0_1 = (RuleCall)cPrefixPrefixCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//QName:
		//	prefix=[Prefix]? ":" name=ID;
		public ParserRule getRule() { return rule; }

		//prefix=[Prefix]? ":" name=ID
		public Group getGroup() { return cGroup; }

		//prefix=[Prefix]?
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//[Prefix]
		public CrossReference getPrefixPrefixCrossReference_0_0() { return cPrefixPrefixCrossReference_0_0; }

		//ID
		public RuleCall getPrefixPrefixIDTerminalRuleCall_0_0_1() { return cPrefixPrefixIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	"?" name=ID;
		public ParserRule getRule() { return rule; }

		//"?" name=ID
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//	StringValue | IntegerValue;
		public ParserRule getRule() { return rule; }

		//StringValue | IntegerValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagRDFTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//StringValue:
		//	value=STRING tag=RDFTag?;
		public ParserRule getRule() { return rule; }

		//value=STRING tag=RDFTag?
		public Group getGroup() { return cGroup; }

		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//tag=RDFTag?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }

		//RDFTag
		public RuleCall getTagRDFTagParserRuleCall_1_0() { return cTagRDFTagParserRuleCall_1_0; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagRDFTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//IntegerValue:
		//	value=INT tag=RDFTag?;
		public ParserRule getRule() { return rule; }

		//value=INT tag=RDFTag?
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//tag=RDFTag?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }

		//RDFTag
		public RuleCall getTagRDFTagParserRuleCall_1_0() { return cTagRDFTagParserRuleCall_1_0; }
	}

	public class RDFTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RDFTag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLangTagParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RDFTag:
		//	TypeTag | LangTag;
		public ParserRule getRule() { return rule; }

		//TypeTag | LangTag
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeTag
		public RuleCall getTypeTagParserRuleCall_0() { return cTypeTagParserRuleCall_0; }

		//LangTag
		public RuleCall getLangTagParserRuleCall_1() { return cLangTagParserRuleCall_1; }
	}

	public class TypeTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeTag hidden(WS):
		//	"^^" type=QName;
		public ParserRule getRule() { return rule; }

		//"^^" type=QName
		public Group getGroup() { return cGroup; }

		//"^^"
		public Keyword getCircumflexAccentCircumflexAccentKeyword_0() { return cCircumflexAccentCircumflexAccentKeyword_0; }

		//type=QName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//QName
		public RuleCall getTypeQNameParserRuleCall_1_0() { return cTypeQNameParserRuleCall_1_0; }
	}

	public class LangTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LangTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLangAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLangIDTerminalRuleCall_1_0 = (RuleCall)cLangAssignment_1.eContents().get(0);
		
		//LangTag hidden(WS):
		//	"@" lang=ID;
		public ParserRule getRule() { return rule; }

		//"@" lang=ID
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//lang=ID
		public Assignment getLangAssignment_1() { return cLangAssignment_1; }

		//ID
		public RuleCall getLangIDTerminalRuleCall_1_0() { return cLangIDTerminalRuleCall_1_0; }
	}
	
	
	private JenaRuleDocumentElements pJenaRuleDocument;
	private RuleElements pRule;
	private PrefixElements pPrefix;
	private BareRuleElements pBareRule;
	private ForwardRuleElements pForwardRule;
	private TermElements pTerm;
	private FunctionElements pFunction;
	private BHTermElements pBHTerm;
	private NodeElements pNode;
	private URIRefElements pURIRef;
	private QNameElements pQName;
	private VariableElements pVariable;
	private LiteralElements pLiteral;
	private StringValueElements pStringValue;
	private IntegerValueElements pIntegerValue;
	private RDFTagElements pRDFTag;
	private TypeTagElements pTypeTag;
	private LangTagElements pLangTag;
	private TerminalRule tIRI_TERMINAL;
	private TerminalRule tSTRING;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public JenaRulesGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//JenaRuleDocument:
	//	prefixes+=Prefix* rules+=Rule*;
	public JenaRuleDocumentElements getJenaRuleDocumentAccess() {
		return (pJenaRuleDocument != null) ? pJenaRuleDocument : (pJenaRuleDocument = new JenaRuleDocumentElements());
	}
	
	public ParserRule getJenaRuleDocumentRule() {
		return getJenaRuleDocumentAccess().getRule();
	}

	//Rule:
	//	bareRule=BareRule | "[" bareRule=BareRule "]" | "[" ruleName=ID ":" bareRule=BareRule "]";
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Prefix:
	//	"@prefix" name=ID ":" uri=IRI_TERMINAL ".";
	public PrefixElements getPrefixAccess() {
		return (pPrefix != null) ? pPrefix : (pPrefix = new PrefixElements());
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	////	|
	////	BackWardRule
	//BareRule:
	//	ForwardRule;
	public BareRuleElements getBareRuleAccess() {
		return (pBareRule != null) ? pBareRule : (pBareRule = new BareRuleElements());
	}
	
	public ParserRule getBareRuleRule() {
		return getBareRuleAccess().getRule();
	}

	//ForwardRule:
	//	leftTerms+=Term ("," leftTerms+=Term)* "->" rightTerms+=Term ("," rightTerms+=Term)*;
	public ForwardRuleElements getForwardRuleAccess() {
		return (pForwardRule != null) ? pForwardRule : (pForwardRule = new ForwardRuleElements());
	}
	
	public ParserRule getForwardRuleRule() {
		return getForwardRuleAccess().getRule();
	}

	////BackWardRule:
	////	left=ForwardRule '<-' rightTerms+=Term (rightTerms+=Term)*
	////;
	////HTerm:
	////     Term | BareRule
	////;
	//Term:
	//	"(" subject=Node predicate=Node object=Node ")";
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Function:
	//	name=ID "(" nodes+=Node ("," nodes+=Node)* ")";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	////          or   (node, node, functor)        // extended triple pattern
	////          or   builtin(node, ... node)      // invoke procedural primitive
	//BHTerm:
	//	Term;
	public BHTermElements getBHTermAccess() {
		return (pBHTerm != null) ? pBHTerm : (pBHTerm = new BHTermElements());
	}
	
	public ParserRule getBHTermRule() {
		return getBHTermAccess().getRule();
	}

	//Node:
	//	URIRef | QName | Variable | Literal | Function;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//URIRef:
	//	uri=IRI_TERMINAL;
	public URIRefElements getURIRefAccess() {
		return (pURIRef != null) ? pURIRef : (pURIRef = new URIRefElements());
	}
	
	public ParserRule getURIRefRule() {
		return getURIRefAccess().getRule();
	}

	//QName:
	//	prefix=[Prefix]? ":" name=ID;
	public QNameElements getQNameAccess() {
		return (pQName != null) ? pQName : (pQName = new QNameElements());
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	//Variable:
	//	"?" name=ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Literal:
	//	StringValue | IntegerValue;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//StringValue:
	//	value=STRING tag=RDFTag?;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//IntegerValue:
	//	value=INT tag=RDFTag?;
	public IntegerValueElements getIntegerValueAccess() {
		return (pIntegerValue != null) ? pIntegerValue : (pIntegerValue = new IntegerValueElements());
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//RDFTag:
	//	TypeTag | LangTag;
	public RDFTagElements getRDFTagAccess() {
		return (pRDFTag != null) ? pRDFTag : (pRDFTag = new RDFTagElements());
	}
	
	public ParserRule getRDFTagRule() {
		return getRDFTagAccess().getRule();
	}

	//TypeTag hidden(WS):
	//	"^^" type=QName;
	public TypeTagElements getTypeTagAccess() {
		return (pTypeTag != null) ? pTypeTag : (pTypeTag = new TypeTagElements());
	}
	
	public ParserRule getTypeTagRule() {
		return getTypeTagAccess().getRule();
	}

	//LangTag hidden(WS):
	//	"@" lang=ID;
	public LangTagElements getLangTagAccess() {
		return (pLangTag != null) ? pLangTag : (pLangTag = new LangTagElements());
	}
	
	public ParserRule getLangTagRule() {
		return getLangTagAccess().getRule();
	}

	//terminal IRI_TERMINAL:
	//	"<" ("a".."z" | "A".."Z" | "_" | "-" | "0".."9" | "/" | ":" | "." | "#" | "?" | "@" | "$" | "&" | "=")* ">";
	public TerminalRule getIRI_TERMINALRule() {
		return (tIRI_TERMINAL != null) ? tIRI_TERMINAL : (tIRI_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IRI_TERMINAL"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "-" | "0".."9" | "/" | "." | "#" | "?")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
