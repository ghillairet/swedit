/*
* generated by Xtext
*/
grammar InternalJenaRules;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipselabs.swedit.jenarules.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipselabs.swedit.jenarules.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipselabs.swedit.jenarules.services.JenaRulesGrammarAccess;

}

@parser::members {
 
 	private JenaRulesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JenaRulesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleJenaRuleDocument
entryRuleJenaRuleDocument 
:
{ before(grammarAccess.getJenaRuleDocumentRule()); }
	 ruleJenaRuleDocument
{ after(grammarAccess.getJenaRuleDocumentRule()); } 
	 EOF 
;

// Rule JenaRuleDocument
ruleJenaRuleDocument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJenaRuleDocumentAccess().getGroup()); }
(rule__JenaRuleDocument__Group__0)
{ after(grammarAccess.getJenaRuleDocumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getAlternatives()); }
(rule__Rule__Alternatives)
{ after(grammarAccess.getRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefix
entryRulePrefix 
:
{ before(grammarAccess.getPrefixRule()); }
	 rulePrefix
{ after(grammarAccess.getPrefixRule()); } 
	 EOF 
;

// Rule Prefix
rulePrefix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrefixAccess().getGroup()); }
(rule__Prefix__Group__0)
{ after(grammarAccess.getPrefixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBareRule
entryRuleBareRule 
:
{ before(grammarAccess.getBareRuleRule()); }
	 ruleBareRule
{ after(grammarAccess.getBareRuleRule()); } 
	 EOF 
;

// Rule BareRule
ruleBareRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBareRuleAccess().getForwardRuleParserRuleCall()); }
	ruleForwardRule
{ after(grammarAccess.getBareRuleAccess().getForwardRuleParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForwardRule
entryRuleForwardRule 
:
{ before(grammarAccess.getForwardRuleRule()); }
	 ruleForwardRule
{ after(grammarAccess.getForwardRuleRule()); } 
	 EOF 
;

// Rule ForwardRule
ruleForwardRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForwardRuleAccess().getGroup()); }
(rule__ForwardRule__Group__0)
{ after(grammarAccess.getForwardRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getAlternatives()); }
(rule__Node__Alternatives)
{ after(grammarAccess.getNodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleURIRef
entryRuleURIRef 
:
{ before(grammarAccess.getURIRefRule()); }
	 ruleURIRef
{ after(grammarAccess.getURIRefRule()); } 
	 EOF 
;

// Rule URIRef
ruleURIRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getURIRefAccess().getUriAssignment()); }
(rule__URIRef__UriAssignment)
{ after(grammarAccess.getURIRefAccess().getUriAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQName
entryRuleQName 
:
{ before(grammarAccess.getQNameRule()); }
	 ruleQName
{ after(grammarAccess.getQNameRule()); } 
	 EOF 
;

// Rule QName
ruleQName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQNameAccess().getGroup()); }
(rule__QName__Group__0)
{ after(grammarAccess.getQNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getGroup()); }
(rule__Variable__Group__0)
{ after(grammarAccess.getVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getGroup()); }
(rule__StringValue__Group__0)
{ after(grammarAccess.getStringValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerValue
entryRuleIntegerValue 
:
{ before(grammarAccess.getIntegerValueRule()); }
	 ruleIntegerValue
{ after(grammarAccess.getIntegerValueRule()); } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerValueAccess().getGroup()); }
(rule__IntegerValue__Group__0)
{ after(grammarAccess.getIntegerValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRDFTag
entryRuleRDFTag 
:
{ before(grammarAccess.getRDFTagRule()); }
	 ruleRDFTag
{ after(grammarAccess.getRDFTagRule()); } 
	 EOF 
;

// Rule RDFTag
ruleRDFTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRDFTagAccess().getAlternatives()); }
(rule__RDFTag__Alternatives)
{ after(grammarAccess.getRDFTagAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeTag
entryRuleTypeTag 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getTypeTagRule()); }
	 ruleTypeTag
{ after(grammarAccess.getTypeTagRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TypeTag
ruleTypeTag
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeTagAccess().getGroup()); }
(rule__TypeTag__Group__0)
{ after(grammarAccess.getTypeTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleLangTag
entryRuleLangTag 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getLangTagRule()); }
	 ruleLangTag
{ after(grammarAccess.getLangTagRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LangTag
ruleLangTag
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLangTagAccess().getGroup()); }
(rule__LangTag__Group__0)
{ after(grammarAccess.getLangTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__Rule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBareRuleAssignment_0()); }
(rule__Rule__BareRuleAssignment_0)
{ after(grammarAccess.getRuleAccess().getBareRuleAssignment_0()); }
)

    |(
{ before(grammarAccess.getRuleAccess().getGroup_1()); }
(rule__Rule__Group_1__0)
{ after(grammarAccess.getRuleAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getRuleAccess().getGroup_2()); }
(rule__Rule__Group_2__0)
{ after(grammarAccess.getRuleAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getURIRefParserRuleCall_0()); }
	ruleURIRef
{ after(grammarAccess.getNodeAccess().getURIRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getQNameParserRuleCall_1()); }
	ruleQName
{ after(grammarAccess.getNodeAccess().getQNameParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getVariableParserRuleCall_2()); }
	ruleVariable
{ after(grammarAccess.getNodeAccess().getVariableParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getLiteralParserRuleCall_3()); }
	ruleLiteral
{ after(grammarAccess.getNodeAccess().getLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getFunctionParserRuleCall_4()); }
	ruleFunction
{ after(grammarAccess.getNodeAccess().getFunctionParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getStringValueParserRuleCall_0()); }
	ruleStringValue
{ after(grammarAccess.getLiteralAccess().getStringValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getIntegerValueParserRuleCall_1()); }
	ruleIntegerValue
{ after(grammarAccess.getLiteralAccess().getIntegerValueParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RDFTag__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRDFTagAccess().getTypeTagParserRuleCall_0()); }
	ruleTypeTag
{ after(grammarAccess.getRDFTagAccess().getTypeTagParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRDFTagAccess().getLangTagParserRuleCall_1()); }
	ruleLangTag
{ after(grammarAccess.getRDFTagAccess().getLangTagParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__JenaRuleDocument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JenaRuleDocument__Group__0__Impl
	rule__JenaRuleDocument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JenaRuleDocument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJenaRuleDocumentAccess().getPrefixesAssignment_0()); }
(rule__JenaRuleDocument__PrefixesAssignment_0)*
{ after(grammarAccess.getJenaRuleDocumentAccess().getPrefixesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JenaRuleDocument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JenaRuleDocument__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JenaRuleDocument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJenaRuleDocumentAccess().getRulesAssignment_1()); }
(rule__JenaRuleDocument__RulesAssignment_1)*
{ after(grammarAccess.getJenaRuleDocumentAccess().getRulesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Rule__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_1__0__Impl
	rule__Rule__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getRuleAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_1__1__Impl
	rule__Rule__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBareRuleAssignment_1_1()); }
(rule__Rule__BareRuleAssignment_1_1)
{ after(grammarAccess.getRuleAccess().getBareRuleAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getRuleAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Rule__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_2__0__Impl
	rule__Rule__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getRuleAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_2__1__Impl
	rule__Rule__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRuleNameAssignment_2_1()); }
(rule__Rule__RuleNameAssignment_2_1)
{ after(grammarAccess.getRuleAccess().getRuleNameAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_2__2__Impl
	rule__Rule__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getColonKeyword_2_2()); }

	':' 

{ after(grammarAccess.getRuleAccess().getColonKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_2__3__Impl
	rule__Rule__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBareRuleAssignment_2_3()); }
(rule__Rule__BareRuleAssignment_2_3)
{ after(grammarAccess.getRuleAccess().getBareRuleAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRightSquareBracketKeyword_2_4()); }

	']' 

{ after(grammarAccess.getRuleAccess().getRightSquareBracketKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Prefix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__0__Impl
	rule__Prefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getPrefixKeyword_0()); }

	'@prefix' 

{ after(grammarAccess.getPrefixAccess().getPrefixKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__1__Impl
	rule__Prefix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getNameAssignment_1()); }
(rule__Prefix__NameAssignment_1)
{ after(grammarAccess.getPrefixAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__2__Impl
	rule__Prefix__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getPrefixAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__3__Impl
	rule__Prefix__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getUriAssignment_3()); }
(rule__Prefix__UriAssignment_3)
{ after(grammarAccess.getPrefixAccess().getUriAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getFullStopKeyword_4()); }

	'.' 

{ after(grammarAccess.getPrefixAccess().getFullStopKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ForwardRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardRule__Group__0__Impl
	rule__ForwardRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getLeftTermsAssignment_0()); }
(rule__ForwardRule__LeftTermsAssignment_0)
{ after(grammarAccess.getForwardRuleAccess().getLeftTermsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardRule__Group__1__Impl
	rule__ForwardRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getGroup_1()); }
(rule__ForwardRule__Group_1__0)*
{ after(grammarAccess.getForwardRuleAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardRule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardRule__Group__2__Impl
	rule__ForwardRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	'->' 

{ after(grammarAccess.getForwardRuleAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardRule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardRule__Group__3__Impl
	rule__ForwardRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getRightTermsAssignment_3()); }
(rule__ForwardRule__RightTermsAssignment_3)
{ after(grammarAccess.getForwardRuleAccess().getRightTermsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardRule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardRule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getGroup_4()); }
(rule__ForwardRule__Group_4__0)*
{ after(grammarAccess.getForwardRuleAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ForwardRule__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardRule__Group_1__0__Impl
	rule__ForwardRule__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getForwardRuleAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardRule__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardRule__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getLeftTermsAssignment_1_1()); }
(rule__ForwardRule__LeftTermsAssignment_1_1)
{ after(grammarAccess.getForwardRuleAccess().getLeftTermsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForwardRule__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardRule__Group_4__0__Impl
	rule__ForwardRule__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getForwardRuleAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardRule__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardRule__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getRightTermsAssignment_4_1()); }
(rule__ForwardRule__RightTermsAssignment_4_1)
{ after(grammarAccess.getForwardRuleAccess().getRightTermsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getTermAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
	rule__Term__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSubjectAssignment_1()); }
(rule__Term__SubjectAssignment_1)
{ after(grammarAccess.getTermAccess().getSubjectAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__2__Impl
	rule__Term__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getPredicateAssignment_2()); }
(rule__Term__PredicateAssignment_2)
{ after(grammarAccess.getTermAccess().getPredicateAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__3__Impl
	rule__Term__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getObjectAssignment_3()); }
(rule__Term__ObjectAssignment_3)
{ after(grammarAccess.getTermAccess().getObjectAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getTermAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
(rule__Function__NameAssignment_0)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNodesAssignment_2()); }
(rule__Function__NodesAssignment_2)
{ after(grammarAccess.getFunctionAccess().getNodesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3()); }
(rule__Function__Group_3__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Function__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__0__Impl
	rule__Function__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getFunctionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNodesAssignment_3_1()); }
(rule__Function__NodesAssignment_3_1)
{ after(grammarAccess.getFunctionAccess().getNodesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QName__Group__0__Impl
	rule__QName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getPrefixAssignment_0()); }
(rule__QName__PrefixAssignment_0)?
{ after(grammarAccess.getQNameAccess().getPrefixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QName__Group__1__Impl
	rule__QName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getQNameAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QName__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QName__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getNameAssignment_2()); }
(rule__QName__NameAssignment_2)
{ after(grammarAccess.getQNameAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Variable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getVariableAccess().getQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
(rule__Variable__NameAssignment_1)
{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValue__Group__0__Impl
	rule__StringValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueAssignment_0()); }
(rule__StringValue__ValueAssignment_0)
{ after(grammarAccess.getStringValueAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getTagAssignment_1()); }
(rule__StringValue__TagAssignment_1)?
{ after(grammarAccess.getStringValueAccess().getTagAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerValue__Group__0__Impl
	rule__IntegerValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getValueAssignment_0()); }
(rule__IntegerValue__ValueAssignment_0)
{ after(grammarAccess.getIntegerValueAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getTagAssignment_1()); }
(rule__IntegerValue__TagAssignment_1)?
{ after(grammarAccess.getIntegerValueAccess().getTagAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeTag__Group__0__Impl
	rule__TypeTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeTagAccess().getCircumflexAccentCircumflexAccentKeyword_0()); }

	'^^' 

{ after(grammarAccess.getTypeTagAccess().getCircumflexAccentCircumflexAccentKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeTag__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeTagAccess().getTypeAssignment_1()); }
(rule__TypeTag__TypeAssignment_1)
{ after(grammarAccess.getTypeTagAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LangTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LangTag__Group__0__Impl
	rule__LangTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LangTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLangTagAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getLangTagAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LangTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LangTag__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LangTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLangTagAccess().getLangAssignment_1()); }
(rule__LangTag__LangAssignment_1)
{ after(grammarAccess.getLangTagAccess().getLangAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__JenaRuleDocument__PrefixesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJenaRuleDocumentAccess().getPrefixesPrefixParserRuleCall_0_0()); }
	rulePrefix{ after(grammarAccess.getJenaRuleDocumentAccess().getPrefixesPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JenaRuleDocument__RulesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJenaRuleDocumentAccess().getRulesRuleParserRuleCall_1_0()); }
	ruleRule{ after(grammarAccess.getJenaRuleDocumentAccess().getRulesRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__BareRuleAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBareRuleBareRuleParserRuleCall_0_0()); }
	ruleBareRule{ after(grammarAccess.getRuleAccess().getBareRuleBareRuleParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__BareRuleAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBareRuleBareRuleParserRuleCall_1_1_0()); }
	ruleBareRule{ after(grammarAccess.getRuleAccess().getBareRuleBareRuleParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__RuleNameAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRuleNameIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getRuleAccess().getRuleNameIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__BareRuleAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBareRuleBareRuleParserRuleCall_2_3_0()); }
	ruleBareRule{ after(grammarAccess.getRuleAccess().getBareRuleBareRuleParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPrefixAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__UriAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getUriIRI_TERMINALTerminalRuleCall_3_0()); }
	RULE_IRI_TERMINAL{ after(grammarAccess.getPrefixAccess().getUriIRI_TERMINALTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__LeftTermsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getLeftTermsTermParserRuleCall_0_0()); }
	ruleTerm{ after(grammarAccess.getForwardRuleAccess().getLeftTermsTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__LeftTermsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getLeftTermsTermParserRuleCall_1_1_0()); }
	ruleTerm{ after(grammarAccess.getForwardRuleAccess().getLeftTermsTermParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__RightTermsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getRightTermsTermParserRuleCall_3_0()); }
	ruleTerm{ after(grammarAccess.getForwardRuleAccess().getRightTermsTermParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardRule__RightTermsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardRuleAccess().getRightTermsTermParserRuleCall_4_1_0()); }
	ruleTerm{ after(grammarAccess.getForwardRuleAccess().getRightTermsTermParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__SubjectAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSubjectNodeParserRuleCall_1_0()); }
	ruleNode{ after(grammarAccess.getTermAccess().getSubjectNodeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__PredicateAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getPredicateNodeParserRuleCall_2_0()); }
	ruleNode{ after(grammarAccess.getTermAccess().getPredicateNodeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ObjectAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getObjectNodeParserRuleCall_3_0()); }
	ruleNode{ after(grammarAccess.getTermAccess().getObjectNodeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NodesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNodesNodeParserRuleCall_2_0()); }
	ruleNode{ after(grammarAccess.getFunctionAccess().getNodesNodeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NodesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNodesNodeParserRuleCall_3_1_0()); }
	ruleNode{ after(grammarAccess.getFunctionAccess().getNodesNodeParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__URIRef__UriAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getURIRefAccess().getUriIRI_TERMINALTerminalRuleCall_0()); }
	RULE_IRI_TERMINAL{ after(grammarAccess.getURIRefAccess().getUriIRI_TERMINALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QName__PrefixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getPrefixPrefixCrossReference_0_0()); }
(
{ before(grammarAccess.getQNameAccess().getPrefixPrefixIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getQNameAccess().getPrefixPrefixIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getQNameAccess().getPrefixPrefixCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QName__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getQNameAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__TagAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getTagRDFTagParserRuleCall_1_0()); }
	ruleRDFTag{ after(grammarAccess.getStringValueAccess().getTagRDFTagParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__TagAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getTagRDFTagParserRuleCall_1_0()); }
	ruleRDFTag{ after(grammarAccess.getIntegerValueAccess().getTagRDFTagParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeTag__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeTagAccess().getTypeQNameParserRuleCall_1_0()); }
	ruleQName{ after(grammarAccess.getTypeTagAccess().getTypeQNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LangTag__LangAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLangTagAccess().getLangIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLangTagAccess().getLangIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_IRI_TERMINAL : '<' ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9'|'/'|':'|'.'|'#'|'?'|'@'|'$'|'&'|'=')* '>';

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9'|'/'|'.'|'#'|'?')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


