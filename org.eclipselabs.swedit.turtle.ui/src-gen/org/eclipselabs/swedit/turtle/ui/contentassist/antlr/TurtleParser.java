/*
* generated by Xtext
*/
package org.eclipselabs.swedit.turtle.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipselabs.swedit.turtle.services.TurtleGrammarAccess;

public class TurtleParser extends AbstractContentAssistParser {
	
	@Inject
	private TurtleGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipselabs.swedit.turtle.ui.contentassist.antlr.internal.InternalTurtleParser createParser() {
		org.eclipselabs.swedit.turtle.ui.contentassist.antlr.internal.InternalTurtleParser result = new org.eclipselabs.swedit.turtle.ui.contentassist.antlr.internal.InternalTurtleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getDirectiveAccess().getAlternatives(), "rule__Directive__Alternatives");
					put(grammarAccess.getSubjectAccess().getAlternatives(), "rule__Subject__Alternatives");
					put(grammarAccess.getVerbAccess().getAlternatives(), "rule__Verb__Alternatives");
					put(grammarAccess.getResourceAccess().getAlternatives(), "rule__Resource__Alternatives");
					put(grammarAccess.getObjectAccess().getAlternatives(), "rule__Object__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getRDFTagAccess().getAlternatives(), "rule__RDFTag__Alternatives");
					put(grammarAccess.getBlankAccess().getAlternatives(), "rule__Blank__Alternatives");
					put(grammarAccess.getPrefixAccess().getGroup(), "rule__Prefix__Group__0");
					put(grammarAccess.getUnNamedPrefixAccess().getGroup(), "rule__UnNamedPrefix__Group__0");
					put(grammarAccess.getBaseAccess().getGroup(), "rule__Base__Group__0");
					put(grammarAccess.getTripleAccess().getGroup(), "rule__Triple__Group__0");
					put(grammarAccess.getTripleAccess().getGroup_2(), "rule__Triple__Group_2__0");
					put(grammarAccess.getPredicateObjectListAccess().getGroup(), "rule__PredicateObjectList__Group__0");
					put(grammarAccess.getObjectListAccess().getGroup(), "rule__ObjectList__Group__0");
					put(grammarAccess.getObjectListAccess().getGroup_1(), "rule__ObjectList__Group_1__0");
					put(grammarAccess.getCollectionAccess().getGroup(), "rule__Collection__Group__0");
					put(grammarAccess.getStringValueAccess().getGroup(), "rule__StringValue__Group__0");
					put(grammarAccess.getIntegerValueAccess().getGroup(), "rule__IntegerValue__Group__0");
					put(grammarAccess.getTypeTagAccess().getGroup(), "rule__TypeTag__Group__0");
					put(grammarAccess.getLangTagAccess().getGroup(), "rule__LangTag__Group__0");
					put(grammarAccess.getQNameAccess().getGroup(), "rule__QName__Group__0");
					put(grammarAccess.getNodeIDAccess().getGroup(), "rule__NodeID__Group__0");
					put(grammarAccess.getBlankNodeContentAccess().getGroup(), "rule__BlankNodeContent__Group__0");
					put(grammarAccess.getBlankNodeContentAccess().getGroup_2(), "rule__BlankNodeContent__Group_2__0");
					put(grammarAccess.getTurtleDocumentAccess().getStatementsAssignment(), "rule__TurtleDocument__StatementsAssignment");
					put(grammarAccess.getPrefixAccess().getNameAssignment_1(), "rule__Prefix__NameAssignment_1");
					put(grammarAccess.getPrefixAccess().getUriAssignment_3(), "rule__Prefix__UriAssignment_3");
					put(grammarAccess.getUnNamedPrefixAccess().getUriAssignment_2(), "rule__UnNamedPrefix__UriAssignment_2");
					put(grammarAccess.getBaseAccess().getUriAssignment_1(), "rule__Base__UriAssignment_1");
					put(grammarAccess.getTripleAccess().getSubjectAssignment_0(), "rule__Triple__SubjectAssignment_0");
					put(grammarAccess.getTripleAccess().getPredicateObjectListAssignment_1(), "rule__Triple__PredicateObjectListAssignment_1");
					put(grammarAccess.getTripleAccess().getPredicateObjectListAssignment_2_1(), "rule__Triple__PredicateObjectListAssignment_2_1");
					put(grammarAccess.getPredicateObjectListAccess().getPredicateAssignment_0(), "rule__PredicateObjectList__PredicateAssignment_0");
					put(grammarAccess.getPredicateObjectListAccess().getObjectListAssignment_1(), "rule__PredicateObjectList__ObjectListAssignment_1");
					put(grammarAccess.getAVerbAccess().getNameAssignment(), "rule__AVerb__NameAssignment");
					put(grammarAccess.getObjectListAccess().getObjectAssignment_0(), "rule__ObjectList__ObjectAssignment_0");
					put(grammarAccess.getObjectListAccess().getObjectAssignment_1_1(), "rule__ObjectList__ObjectAssignment_1_1");
					put(grammarAccess.getCollectionAccess().getItemsAssignment_1(), "rule__Collection__ItemsAssignment_1");
					put(grammarAccess.getStringValueAccess().getValueAssignment_0(), "rule__StringValue__ValueAssignment_0");
					put(grammarAccess.getStringValueAccess().getTagAssignment_1(), "rule__StringValue__TagAssignment_1");
					put(grammarAccess.getIntegerValueAccess().getValueAssignment_0(), "rule__IntegerValue__ValueAssignment_0");
					put(grammarAccess.getIntegerValueAccess().getTagAssignment_1(), "rule__IntegerValue__TagAssignment_1");
					put(grammarAccess.getTypeTagAccess().getTypeAssignment_1(), "rule__TypeTag__TypeAssignment_1");
					put(grammarAccess.getLangTagAccess().getLangAssignment_1(), "rule__LangTag__LangAssignment_1");
					put(grammarAccess.getURIRefAccess().getUriAssignment(), "rule__URIRef__UriAssignment");
					put(grammarAccess.getQNameAccess().getPrefixAssignment_0(), "rule__QName__PrefixAssignment_0");
					put(grammarAccess.getQNameAccess().getNameAssignment_2(), "rule__QName__NameAssignment_2");
					put(grammarAccess.getNodeIDAccess().getNodeIDAssignment_1(), "rule__NodeID__NodeIDAssignment_1");
					put(grammarAccess.getVoidAccess().getNodeIDAssignment(), "rule__Void__NodeIDAssignment");
					put(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListAssignment_1(), "rule__BlankNodeContent__PredicateObjectListAssignment_1");
					put(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListAssignment_2_1(), "rule__BlankNodeContent__PredicateObjectListAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipselabs.swedit.turtle.ui.contentassist.antlr.internal.InternalTurtleParser typedParser = (org.eclipselabs.swedit.turtle.ui.contentassist.antlr.internal.InternalTurtleParser) parser;
			typedParser.entryRuleTurtleDocument();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TurtleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TurtleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
