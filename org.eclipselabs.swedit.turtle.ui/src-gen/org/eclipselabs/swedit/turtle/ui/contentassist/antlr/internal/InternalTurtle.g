/*
* generated by Xtext
*/
grammar InternalTurtle;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipselabs.swedit.turtle.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipselabs.swedit.turtle.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipselabs.swedit.turtle.services.TurtleGrammarAccess;

}

@parser::members {
 
 	private TurtleGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TurtleGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTurtleDocument
entryRuleTurtleDocument 
:
{ before(grammarAccess.getTurtleDocumentRule()); }
	 ruleTurtleDocument
{ after(grammarAccess.getTurtleDocumentRule()); } 
	 EOF 
;

// Rule TurtleDocument
ruleTurtleDocument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTurtleDocumentAccess().getStatementsAssignment()); }
(rule__TurtleDocument__StatementsAssignment)*
{ after(grammarAccess.getTurtleDocumentAccess().getStatementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDirective
entryRuleDirective 
:
{ before(grammarAccess.getDirectiveRule()); }
	 ruleDirective
{ after(grammarAccess.getDirectiveRule()); } 
	 EOF 
;

// Rule Directive
ruleDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDirectiveAccess().getAlternatives()); }
(rule__Directive__Alternatives)
{ after(grammarAccess.getDirectiveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefix
entryRulePrefix 
:
{ before(grammarAccess.getPrefixRule()); }
	 rulePrefix
{ after(grammarAccess.getPrefixRule()); } 
	 EOF 
;

// Rule Prefix
rulePrefix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrefixAccess().getGroup()); }
(rule__Prefix__Group__0)
{ after(grammarAccess.getPrefixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnNamedPrefix
entryRuleUnNamedPrefix 
:
{ before(grammarAccess.getUnNamedPrefixRule()); }
	 ruleUnNamedPrefix
{ after(grammarAccess.getUnNamedPrefixRule()); } 
	 EOF 
;

// Rule UnNamedPrefix
ruleUnNamedPrefix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnNamedPrefixAccess().getGroup()); }
(rule__UnNamedPrefix__Group__0)
{ after(grammarAccess.getUnNamedPrefixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBase
entryRuleBase 
:
{ before(grammarAccess.getBaseRule()); }
	 ruleBase
{ after(grammarAccess.getBaseRule()); } 
	 EOF 
;

// Rule Base
ruleBase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseAccess().getGroup()); }
(rule__Base__Group__0)
{ after(grammarAccess.getBaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTriple
entryRuleTriple 
:
{ before(grammarAccess.getTripleRule()); }
	 ruleTriple
{ after(grammarAccess.getTripleRule()); } 
	 EOF 
;

// Rule Triple
ruleTriple
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTripleAccess().getGroup()); }
(rule__Triple__Group__0)
{ after(grammarAccess.getTripleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubject
entryRuleSubject 
:
{ before(grammarAccess.getSubjectRule()); }
	 ruleSubject
{ after(grammarAccess.getSubjectRule()); } 
	 EOF 
;

// Rule Subject
ruleSubject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubjectAccess().getAlternatives()); }
(rule__Subject__Alternatives)
{ after(grammarAccess.getSubjectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePredicateObjectList
entryRulePredicateObjectList 
:
{ before(grammarAccess.getPredicateObjectListRule()); }
	 rulePredicateObjectList
{ after(grammarAccess.getPredicateObjectListRule()); } 
	 EOF 
;

// Rule PredicateObjectList
rulePredicateObjectList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateObjectListAccess().getGroup()); }
(rule__PredicateObjectList__Group__0)
{ after(grammarAccess.getPredicateObjectListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerb
entryRuleVerb 
:
{ before(grammarAccess.getVerbRule()); }
	 ruleVerb
{ after(grammarAccess.getVerbRule()); } 
	 EOF 
;

// Rule Verb
ruleVerb
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVerbAccess().getAlternatives()); }
(rule__Verb__Alternatives)
{ after(grammarAccess.getVerbAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAVerb
entryRuleAVerb 
:
{ before(grammarAccess.getAVerbRule()); }
	 ruleAVerb
{ after(grammarAccess.getAVerbRule()); } 
	 EOF 
;

// Rule AVerb
ruleAVerb
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAVerbAccess().getNameAssignment()); }
(rule__AVerb__NameAssignment)
{ after(grammarAccess.getAVerbAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResource
entryRuleResource 
:
{ before(grammarAccess.getResourceRule()); }
	 ruleResource
{ after(grammarAccess.getResourceRule()); } 
	 EOF 
;

// Rule Resource
ruleResource
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getResourceAccess().getAlternatives()); }
(rule__Resource__Alternatives)
{ after(grammarAccess.getResourceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleObjectList
entryRuleObjectList 
:
{ before(grammarAccess.getObjectListRule()); }
	 ruleObjectList
{ after(grammarAccess.getObjectListRule()); } 
	 EOF 
;

// Rule ObjectList
ruleObjectList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObjectListAccess().getGroup()); }
(rule__ObjectList__Group__0)
{ after(grammarAccess.getObjectListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleObject
entryRuleObject 
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObjectAccess().getAlternatives()); }
(rule__Object__Alternatives)
{ after(grammarAccess.getObjectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollection
entryRuleCollection 
:
{ before(grammarAccess.getCollectionRule()); }
	 ruleCollection
{ after(grammarAccess.getCollectionRule()); } 
	 EOF 
;

// Rule Collection
ruleCollection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCollectionAccess().getGroup()); }
(rule__Collection__Group__0)
{ after(grammarAccess.getCollectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getGroup()); }
(rule__StringValue__Group__0)
{ after(grammarAccess.getStringValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerValue
entryRuleIntegerValue 
:
{ before(grammarAccess.getIntegerValueRule()); }
	 ruleIntegerValue
{ after(grammarAccess.getIntegerValueRule()); } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerValueAccess().getGroup()); }
(rule__IntegerValue__Group__0)
{ after(grammarAccess.getIntegerValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRDFTag
entryRuleRDFTag 
:
{ before(grammarAccess.getRDFTagRule()); }
	 ruleRDFTag
{ after(grammarAccess.getRDFTagRule()); } 
	 EOF 
;

// Rule RDFTag
ruleRDFTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRDFTagAccess().getAlternatives()); }
(rule__RDFTag__Alternatives)
{ after(grammarAccess.getRDFTagAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeTag
entryRuleTypeTag 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getTypeTagRule()); }
	 ruleTypeTag
{ after(grammarAccess.getTypeTagRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TypeTag
ruleTypeTag
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeTagAccess().getGroup()); }
(rule__TypeTag__Group__0)
{ after(grammarAccess.getTypeTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleLangTag
entryRuleLangTag 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
:
{ before(grammarAccess.getLangTagRule()); }
	 ruleLangTag
{ after(grammarAccess.getLangTagRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LangTag
ruleLangTag
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLangTagAccess().getGroup()); }
(rule__LangTag__Group__0)
{ after(grammarAccess.getLangTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleURIRef
entryRuleURIRef 
:
{ before(grammarAccess.getURIRefRule()); }
	 ruleURIRef
{ after(grammarAccess.getURIRefRule()); } 
	 EOF 
;

// Rule URIRef
ruleURIRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getURIRefAccess().getUriAssignment()); }
(rule__URIRef__UriAssignment)
{ after(grammarAccess.getURIRefAccess().getUriAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQName
entryRuleQName 
:
{ before(grammarAccess.getQNameRule()); }
	 ruleQName
{ after(grammarAccess.getQNameRule()); } 
	 EOF 
;

// Rule QName
ruleQName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQNameAccess().getGroup()); }
(rule__QName__Group__0)
{ after(grammarAccess.getQNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlank
entryRuleBlank 
:
{ before(grammarAccess.getBlankRule()); }
	 ruleBlank
{ after(grammarAccess.getBlankRule()); } 
	 EOF 
;

// Rule Blank
ruleBlank
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlankAccess().getAlternatives()); }
(rule__Blank__Alternatives)
{ after(grammarAccess.getBlankAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeID
entryRuleNodeID 
:
{ before(grammarAccess.getNodeIDRule()); }
	 ruleNodeID
{ after(grammarAccess.getNodeIDRule()); } 
	 EOF 
;

// Rule NodeID
ruleNodeID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeIDAccess().getGroup()); }
(rule__NodeID__Group__0)
{ after(grammarAccess.getNodeIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVoid
entryRuleVoid 
:
{ before(grammarAccess.getVoidRule()); }
	 ruleVoid
{ after(grammarAccess.getVoidRule()); } 
	 EOF 
;

// Rule Void
ruleVoid
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVoidAccess().getNodeIDAssignment()); }
(rule__Void__NodeIDAssignment)
{ after(grammarAccess.getVoidAccess().getNodeIDAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlankNodeContent
entryRuleBlankNodeContent 
:
{ before(grammarAccess.getBlankNodeContentRule()); }
	 ruleBlankNodeContent
{ after(grammarAccess.getBlankNodeContentRule()); } 
	 EOF 
;

// Rule BlankNodeContent
ruleBlankNodeContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlankNodeContentAccess().getGroup()); }
(rule__BlankNodeContent__Group__0)
{ after(grammarAccess.getBlankNodeContentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getDirectiveParserRuleCall_0()); }
	ruleDirective
{ after(grammarAccess.getStatementAccess().getDirectiveParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getTripleParserRuleCall_1()); }
	ruleTriple
{ after(grammarAccess.getStatementAccess().getTripleParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectiveAccess().getPrefixParserRuleCall_0()); }
	rulePrefix
{ after(grammarAccess.getDirectiveAccess().getPrefixParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDirectiveAccess().getUnNamedPrefixParserRuleCall_1()); }
	ruleUnNamedPrefix
{ after(grammarAccess.getDirectiveAccess().getUnNamedPrefixParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDirectiveAccess().getBaseParserRuleCall_2()); }
	ruleBase
{ after(grammarAccess.getDirectiveAccess().getBaseParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubjectAccess().getResourceParserRuleCall_0()); }
	ruleResource
{ after(grammarAccess.getSubjectAccess().getResourceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSubjectAccess().getBlankParserRuleCall_1()); }
	ruleBlank
{ after(grammarAccess.getSubjectAccess().getBlankParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Verb__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerbAccess().getResourceParserRuleCall_0()); }
	ruleResource
{ after(grammarAccess.getVerbAccess().getResourceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVerbAccess().getAVerbParserRuleCall_1()); }
	ruleAVerb
{ after(grammarAccess.getVerbAccess().getAVerbParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Resource__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceAccess().getURIRefParserRuleCall_0()); }
	ruleURIRef
{ after(grammarAccess.getResourceAccess().getURIRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getResourceAccess().getQNameParserRuleCall_1()); }
	ruleQName
{ after(grammarAccess.getResourceAccess().getQNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectAccess().getResourceParserRuleCall_0()); }
	ruleResource
{ after(grammarAccess.getObjectAccess().getResourceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getObjectAccess().getBlankParserRuleCall_1()); }
	ruleBlank
{ after(grammarAccess.getObjectAccess().getBlankParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getObjectAccess().getLiteralParserRuleCall_2()); }
	ruleLiteral
{ after(grammarAccess.getObjectAccess().getLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getStringValueParserRuleCall_0()); }
	ruleStringValue
{ after(grammarAccess.getLiteralAccess().getStringValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getIntegerValueParserRuleCall_1()); }
	ruleIntegerValue
{ after(grammarAccess.getLiteralAccess().getIntegerValueParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RDFTag__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRDFTagAccess().getTypeTagParserRuleCall_0()); }
	ruleTypeTag
{ after(grammarAccess.getRDFTagAccess().getTypeTagParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRDFTagAccess().getLangTagParserRuleCall_1()); }
	ruleLangTag
{ after(grammarAccess.getRDFTagAccess().getLangTagParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Blank__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankAccess().getNodeIDParserRuleCall_0()); }
	ruleNodeID
{ after(grammarAccess.getBlankAccess().getNodeIDParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBlankAccess().getVoidParserRuleCall_1()); }
	ruleVoid
{ after(grammarAccess.getBlankAccess().getVoidParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBlankAccess().getCollectionParserRuleCall_2()); }
	ruleCollection
{ after(grammarAccess.getBlankAccess().getCollectionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBlankAccess().getBlankNodeContentParserRuleCall_3()); }
	ruleBlankNodeContent
{ after(grammarAccess.getBlankAccess().getBlankNodeContentParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Prefix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__0__Impl
	rule__Prefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getPrefixKeyword_0()); }

	'@prefix' 

{ after(grammarAccess.getPrefixAccess().getPrefixKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__1__Impl
	rule__Prefix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getNameAssignment_1()); }
(rule__Prefix__NameAssignment_1)
{ after(grammarAccess.getPrefixAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__2__Impl
	rule__Prefix__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getPrefixAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__3__Impl
	rule__Prefix__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getUriAssignment_3()); }
(rule__Prefix__UriAssignment_3)
{ after(grammarAccess.getPrefixAccess().getUriAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getFullStopKeyword_4()); }

	'.' 

{ after(grammarAccess.getPrefixAccess().getFullStopKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__UnNamedPrefix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnNamedPrefix__Group__0__Impl
	rule__UnNamedPrefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnNamedPrefix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnNamedPrefixAccess().getPrefixKeyword_0()); }

	'@prefix' 

{ after(grammarAccess.getUnNamedPrefixAccess().getPrefixKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnNamedPrefix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnNamedPrefix__Group__1__Impl
	rule__UnNamedPrefix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnNamedPrefix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnNamedPrefixAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getUnNamedPrefixAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnNamedPrefix__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnNamedPrefix__Group__2__Impl
	rule__UnNamedPrefix__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnNamedPrefix__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnNamedPrefixAccess().getUriAssignment_2()); }
(rule__UnNamedPrefix__UriAssignment_2)
{ after(grammarAccess.getUnNamedPrefixAccess().getUriAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnNamedPrefix__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnNamedPrefix__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnNamedPrefix__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnNamedPrefixAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getUnNamedPrefixAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Base__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Base__Group__0__Impl
	rule__Base__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseAccess().getBaseKeyword_0()); }

	'@base' 

{ after(grammarAccess.getBaseAccess().getBaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Base__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Base__Group__1__Impl
	rule__Base__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseAccess().getUriAssignment_1()); }
(rule__Base__UriAssignment_1)
{ after(grammarAccess.getBaseAccess().getUriAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Base__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Base__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getBaseAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Triple__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Triple__Group__0__Impl
	rule__Triple__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Triple__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTripleAccess().getSubjectAssignment_0()); }
(rule__Triple__SubjectAssignment_0)
{ after(grammarAccess.getTripleAccess().getSubjectAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Triple__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Triple__Group__1__Impl
	rule__Triple__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Triple__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTripleAccess().getPredicateObjectListAssignment_1()); }
(rule__Triple__PredicateObjectListAssignment_1)
{ after(grammarAccess.getTripleAccess().getPredicateObjectListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Triple__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Triple__Group__2__Impl
	rule__Triple__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Triple__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTripleAccess().getGroup_2()); }
(rule__Triple__Group_2__0)*
{ after(grammarAccess.getTripleAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Triple__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Triple__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Triple__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTripleAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getTripleAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Triple__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Triple__Group_2__0__Impl
	rule__Triple__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Triple__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTripleAccess().getSemicolonKeyword_2_0()); }

	';' 

{ after(grammarAccess.getTripleAccess().getSemicolonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Triple__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Triple__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Triple__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTripleAccess().getPredicateObjectListAssignment_2_1()); }
(rule__Triple__PredicateObjectListAssignment_2_1)
{ after(grammarAccess.getTripleAccess().getPredicateObjectListAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PredicateObjectList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateObjectList__Group__0__Impl
	rule__PredicateObjectList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateObjectListAccess().getPredicateAssignment_0()); }
(rule__PredicateObjectList__PredicateAssignment_0)
{ after(grammarAccess.getPredicateObjectListAccess().getPredicateAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObjectList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateObjectList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateObjectListAccess().getObjectListAssignment_1()); }
(rule__PredicateObjectList__ObjectListAssignment_1)
{ after(grammarAccess.getPredicateObjectListAccess().getObjectListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ObjectList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectList__Group__0__Impl
	rule__ObjectList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectListAccess().getObjectAssignment_0()); }
(rule__ObjectList__ObjectAssignment_0)
{ after(grammarAccess.getObjectListAccess().getObjectAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectListAccess().getGroup_1()); }
(rule__ObjectList__Group_1__0)*
{ after(grammarAccess.getObjectListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ObjectList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectList__Group_1__0__Impl
	rule__ObjectList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getObjectListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectListAccess().getObjectAssignment_1_1()); }
(rule__ObjectList__ObjectAssignment_1_1)
{ after(grammarAccess.getObjectListAccess().getObjectAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Collection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group__0__Impl
	rule__Collection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getCollectionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group__1__Impl
	rule__Collection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCollectionAccess().getItemsAssignment_1()); }
(rule__Collection__ItemsAssignment_1)
{ after(grammarAccess.getCollectionAccess().getItemsAssignment_1()); }
)
(
{ before(grammarAccess.getCollectionAccess().getItemsAssignment_1()); }
(rule__Collection__ItemsAssignment_1)*
{ after(grammarAccess.getCollectionAccess().getItemsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Collection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Collection__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getCollectionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StringValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValue__Group__0__Impl
	rule__StringValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueAssignment_0()); }
(rule__StringValue__ValueAssignment_0)
{ after(grammarAccess.getStringValueAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getTagAssignment_1()); }
(rule__StringValue__TagAssignment_1)?
{ after(grammarAccess.getStringValueAccess().getTagAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerValue__Group__0__Impl
	rule__IntegerValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getValueAssignment_0()); }
(rule__IntegerValue__ValueAssignment_0)
{ after(grammarAccess.getIntegerValueAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getTagAssignment_1()); }
(rule__IntegerValue__TagAssignment_1)?
{ after(grammarAccess.getIntegerValueAccess().getTagAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeTag__Group__0__Impl
	rule__TypeTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeTagAccess().getCircumflexAccentCircumflexAccentKeyword_0()); }

	'^^' 

{ after(grammarAccess.getTypeTagAccess().getCircumflexAccentCircumflexAccentKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeTag__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeTagAccess().getTypeAssignment_1()); }
(rule__TypeTag__TypeAssignment_1)
{ after(grammarAccess.getTypeTagAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LangTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LangTag__Group__0__Impl
	rule__LangTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LangTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLangTagAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getLangTagAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LangTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LangTag__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LangTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLangTagAccess().getLangAssignment_1()); }
(rule__LangTag__LangAssignment_1)
{ after(grammarAccess.getLangTagAccess().getLangAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QName__Group__0__Impl
	rule__QName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getPrefixAssignment_0()); }
(rule__QName__PrefixAssignment_0)?
{ after(grammarAccess.getQNameAccess().getPrefixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QName__Group__1__Impl
	rule__QName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getQNameAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QName__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QName__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getNameAssignment_2()); }
(rule__QName__NameAssignment_2)
{ after(grammarAccess.getQNameAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NodeID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeID__Group__0__Impl
	rule__NodeID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeIDAccess().get_Keyword_0()); }

	'_:' 

{ after(grammarAccess.getNodeIDAccess().get_Keyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeIDAccess().getNodeIDAssignment_1()); }
(rule__NodeID__NodeIDAssignment_1)
{ after(grammarAccess.getNodeIDAccess().getNodeIDAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlankNodeContent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlankNodeContent__Group__0__Impl
	rule__BlankNodeContent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankNodeContent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankNodeContentAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getBlankNodeContentAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlankNodeContent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlankNodeContent__Group__1__Impl
	rule__BlankNodeContent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankNodeContent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListAssignment_1()); }
(rule__BlankNodeContent__PredicateObjectListAssignment_1)
{ after(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlankNodeContent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlankNodeContent__Group__2__Impl
	rule__BlankNodeContent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankNodeContent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankNodeContentAccess().getGroup_2()); }
(rule__BlankNodeContent__Group_2__0)*
{ after(grammarAccess.getBlankNodeContentAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlankNodeContent__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlankNodeContent__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankNodeContent__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankNodeContentAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getBlankNodeContentAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BlankNodeContent__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlankNodeContent__Group_2__0__Impl
	rule__BlankNodeContent__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankNodeContent__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankNodeContentAccess().getSemicolonKeyword_2_0()); }

	';' 

{ after(grammarAccess.getBlankNodeContentAccess().getSemicolonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlankNodeContent__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlankNodeContent__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlankNodeContent__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListAssignment_2_1()); }
(rule__BlankNodeContent__PredicateObjectListAssignment_2_1)
{ after(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__TurtleDocument__StatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurtleDocumentAccess().getStatementsStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getTurtleDocumentAccess().getStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPrefixAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__UriAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getUriIRI_TERMINALTerminalRuleCall_3_0()); }
	RULE_IRI_TERMINAL{ after(grammarAccess.getPrefixAccess().getUriIRI_TERMINALTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnNamedPrefix__UriAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnNamedPrefixAccess().getUriIRI_TERMINALTerminalRuleCall_2_0()); }
	RULE_IRI_TERMINAL{ after(grammarAccess.getUnNamedPrefixAccess().getUriIRI_TERMINALTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Base__UriAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseAccess().getUriIRI_TERMINALTerminalRuleCall_1_0()); }
	RULE_IRI_TERMINAL{ after(grammarAccess.getBaseAccess().getUriIRI_TERMINALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Triple__SubjectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTripleAccess().getSubjectSubjectParserRuleCall_0_0()); }
	ruleSubject{ after(grammarAccess.getTripleAccess().getSubjectSubjectParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Triple__PredicateObjectListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTripleAccess().getPredicateObjectListPredicateObjectListParserRuleCall_1_0()); }
	rulePredicateObjectList{ after(grammarAccess.getTripleAccess().getPredicateObjectListPredicateObjectListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Triple__PredicateObjectListAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTripleAccess().getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0()); }
	rulePredicateObjectList{ after(grammarAccess.getTripleAccess().getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__PredicateAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateObjectListAccess().getPredicateVerbParserRuleCall_0_0()); }
	ruleVerb{ after(grammarAccess.getPredicateObjectListAccess().getPredicateVerbParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectList__ObjectListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateObjectListAccess().getObjectListObjectListParserRuleCall_1_0()); }
	ruleObjectList{ after(grammarAccess.getPredicateObjectListAccess().getObjectListObjectListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AVerb__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVerbAccess().getNameAKeyword_0()); }
(
{ before(grammarAccess.getAVerbAccess().getNameAKeyword_0()); }

	'a' 

{ after(grammarAccess.getAVerbAccess().getNameAKeyword_0()); }
)

{ after(grammarAccess.getAVerbAccess().getNameAKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__ObjectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectListAccess().getObjectObjectParserRuleCall_0_0()); }
	ruleObject{ after(grammarAccess.getObjectListAccess().getObjectObjectParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectList__ObjectAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectListAccess().getObjectObjectParserRuleCall_1_1_0()); }
	ruleObject{ after(grammarAccess.getObjectListAccess().getObjectObjectParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__ItemsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionAccess().getItemsObjectListParserRuleCall_1_0()); }
	ruleObjectList{ after(grammarAccess.getCollectionAccess().getItemsObjectListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__TagAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getTagRDFTagParserRuleCall_1_0()); }
	ruleRDFTag{ after(grammarAccess.getStringValueAccess().getTagRDFTagParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__TagAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getTagRDFTagParserRuleCall_1_0()); }
	ruleRDFTag{ after(grammarAccess.getIntegerValueAccess().getTagRDFTagParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeTag__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeTagAccess().getTypeQNameParserRuleCall_1_0()); }
	ruleQName{ after(grammarAccess.getTypeTagAccess().getTypeQNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LangTag__LangAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLangTagAccess().getLangIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLangTagAccess().getLangIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__URIRef__UriAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getURIRefAccess().getUriIRI_TERMINALTerminalRuleCall_0()); }
	RULE_IRI_TERMINAL{ after(grammarAccess.getURIRefAccess().getUriIRI_TERMINALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QName__PrefixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getPrefixPrefixCrossReference_0_0()); }
(
{ before(grammarAccess.getQNameAccess().getPrefixPrefixIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getQNameAccess().getPrefixPrefixIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getQNameAccess().getPrefixPrefixCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QName__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getQNameAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeID__NodeIDAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeIDAccess().getNodeIDIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNodeIDAccess().getNodeIDIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Void__NodeIDAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVoidAccess().getNodeIDLeftSquareBracketRightSquareBracketKeyword_0()); }
(
{ before(grammarAccess.getVoidAccess().getNodeIDLeftSquareBracketRightSquareBracketKeyword_0()); }

	'[]' 

{ after(grammarAccess.getVoidAccess().getNodeIDLeftSquareBracketRightSquareBracketKeyword_0()); }
)

{ after(grammarAccess.getVoidAccess().getNodeIDLeftSquareBracketRightSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlankNodeContent__PredicateObjectListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListPredicateObjectListParserRuleCall_1_0()); }
	rulePredicateObjectList{ after(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListPredicateObjectListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlankNodeContent__PredicateObjectListAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0()); }
	rulePredicateObjectList{ after(grammarAccess.getBlankNodeContentAccess().getPredicateObjectListPredicateObjectListParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_IRI_TERMINAL : '<' ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9'|'/'|':'|'.'|'#'|'?'|'@'|'$'|'&'|'=')* '>';

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9'|'/'|'.'|'#'|'?')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


